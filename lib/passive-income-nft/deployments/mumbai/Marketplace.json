{
  "address": "0x2b790101b49cb49Dfb366C66880b4D6eCeD2077B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usdcAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nftContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "routerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "MarketItemCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "MarketItemDelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "MarketItemSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "MarketItemUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_idToMarketItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "listed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_itemsByOwner",
      "outputs": [
        {
          "internalType": "contract Collection",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "routerPath",
          "type": "address[]"
        }
      ],
      "name": "addPaymentToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "afterBurnToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "delistMarketItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "itemIds",
          "type": "uint256[]"
        }
      ],
      "name": "fetchItems",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "listed",
              "type": "bool"
            }
          ],
          "internalType": "struct Marketplace.MarketItem[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lastItemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pageSize",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "ascending",
          "type": "bool"
        }
      ],
      "name": "fetchItemsByOwner",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "listed",
              "type": "bool"
            }
          ],
          "internalType": "struct Marketplace.MarketItem[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lastItemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pageSize",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "ascending",
          "type": "bool"
        }
      ],
      "name": "fetchMarketItems",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "listed",
              "type": "bool"
            }
          ],
          "internalType": "struct Marketplace.MarketItem[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "name": "getMarketItem",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "listed",
              "type": "bool"
            }
          ],
          "internalType": "struct Marketplace.MarketItem",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPaymentTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getSwapRoute",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "listMarketItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftContract",
      "outputs": [
        {
          "internalType": "contract PassiveIncomeNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "purchaseMarketItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "removePaymentToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee_",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeCollector_",
          "type": "address"
        }
      ],
      "name": "setFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "totalValueByOwner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "freeClaimable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "updateTokenOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xeaac665da05a06696565f395c7a73b12c5b6a9c1ce6a97f0e5ead43694432f16",
  "receipt": {
    "to": null,
    "from": "0x3d41487A3c5662eDE90D0eE8854f3cC59E8D66AD",
    "contractAddress": "0x2b790101b49cb49Dfb366C66880b4D6eCeD2077B",
    "transactionIndex": 2,
    "gasUsed": "3452169",
    "logsBloom": "0x
    "blockHash": "0xae320cc8146bac5b99a798edc31c73d44a826f4c57440ac7c60f55db2e549217",
    "transactionHash": "0xeaac665da05a06696565f395c7a73b12c5b6a9c1ce6a97f0e5ead43694432f16",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 26191391,
        "transactionHash": "0xeaac665da05a06696565f395c7a73b12c5b6a9c1ce6a97f0e5ead43694432f16",
        "address": "0x2b790101b49cb49Dfb366C66880b4D6eCeD2077B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003d41487a3c5662ede90d0ee8854f3cc59e8d66ad"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0xae320cc8146bac5b99a798edc31c73d44a826f4c57440ac7c60f55db2e549217"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 26191391,
        "transactionHash": "0xeaac665da05a06696565f395c7a73b12c5b6a9c1ce6a97f0e5ead43694432f16",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000003d41487a3c5662ede90d0ee8854f3cc59e8d66ad",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000f54a9699589fb800000000000000000000000000000000000000000000000040a8b361f7a6ab670000000000000000000000000000000000000000000014a71a69f8b43ca10f290000000000000000000000000000000000000000000000003fb368cb5e4e0baf0000000000000000000000000000000000000000000014a71b5f434ad5f9aee1",
        "logIndex": 10,
        "blockHash": "0xae320cc8146bac5b99a798edc31c73d44a826f4c57440ac7c60f55db2e549217"
      }
    ],
    "blockNumber": 26191391,
    "cumulativeGasUsed": "3813961",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA0fB0349526B7213b6be0F1D9A62f952A9179D96",
    "0x8ddebAC47871e129EE80b51c8ec55Ec28770b29e",
    "0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506"
  ],
  "numDeployments": 5,
  "solcInputHash": "5e0239e8daaf16e76295b0133f4f04fe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usdcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"MarketItemCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MarketItemDelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"MarketItemSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"MarketItemUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_idToMarketItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"listed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_itemsByOwner\",\"outputs\":[{\"internalType\":\"contract Collection\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"routerPath\",\"type\":\"address[]\"}],\"name\":\"addPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"afterBurnToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"delistMarketItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"}],\"name\":\"fetchItems\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"listed\",\"type\":\"bool\"}],\"internalType\":\"struct Marketplace.MarketItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastItemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ascending\",\"type\":\"bool\"}],\"name\":\"fetchItemsByOwner\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"listed\",\"type\":\"bool\"}],\"internalType\":\"struct Marketplace.MarketItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lastItemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ascending\",\"type\":\"bool\"}],\"name\":\"fetchMarketItems\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"listed\",\"type\":\"bool\"}],\"internalType\":\"struct Marketplace.MarketItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"getMarketItem\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"listed\",\"type\":\"bool\"}],\"internalType\":\"struct Marketplace.MarketItem\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getSwapRoute\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listMarketItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftContract\",\"outputs\":[{\"internalType\":\"contract PassiveIncomeNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"purchaseMarketItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"removePaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeCollector_\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"totalValueByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeClaimable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"updateTokenOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addPaymentToken(address,address[])\":{\"details\":\"Adds a new token as payment option.\"},\"afterBurnToken(uint256)\":{\"details\":\"Called by NFT contract after a token was burned.\"},\"delistMarketItem(uint256)\":{\"details\":\"Delists an item from the marketplace. The item itself will be transferred back to the seller.\"},\"fetchItems(uint256[])\":{\"details\":\"Returns a list of items.\"},\"fetchItemsByOwner(address,uint256,uint256,bool)\":{\"details\":\"Returns a page of listed market items.\"},\"fetchMarketItems(uint256,uint256,bool)\":{\"details\":\"Returns a page of listed market items.\"},\"getMarketItem(uint256)\":{\"details\":\"Returns the market item for the provided id.\"},\"getPaymentTokens()\":{\"details\":\"Returns all valid payment tokens.\"},\"getSwapRoute(address)\":{\"details\":\"Returns the swap route for the given token.\"},\"listMarketItem(uint256,address,uint256)\":{\"details\":\"Lists an item for sale on the marketplace. The item itself will be transferred to the marketplace.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"purchaseMarketItem(uint256)\":{\"details\":\"Sells the market item. Funds will be transferred to the seller. The ownership of the item will be transferred to the buyer.\"},\"removePaymentToken(address)\":{\"details\":\"Removes a token from payment options.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFee(uint256)\":{\"details\":\"Sets the TX fee that is applied to each purchase.\"},\"setFeeCollector(address)\":{\"details\":\"Sets the address where TX fees are being sent to.\"},\"totalValueByOwner(address)\":{\"details\":\"Returns the total value for all items of the given owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Marketplace.sol\":\"Marketplace\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Globals.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nuint8 constant MIN_LOCK_DURATION = 2;\\nuint8 constant MAX_LOCK_DURATION = 48;\\n\",\"keccak256\":\"0x4be59af86075abafbfe761b71883b910f7b69d8a6cb477781eeeb4370ea755dd\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/Marketplace.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./utils/Collection.sol\\\";\\nimport \\\"./utils/SafeCollection.sol\\\";\\nimport \\\"./PassiveIncomeNFT.sol\\\";\\n\\ncontract Marketplace is IMarketplace, Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using SafeCollection for Collection;\\n    using SafeCollection for mapping(address => Collection);\\n\\n    struct MarketItem {\\n        uint256 tokenId;\\n        address seller;\\n        address owner;\\n        address paymentToken;\\n        uint256 price;\\n        bool listed;\\n    }\\n\\n    IERC20 public immutable USDC;\\n    PassiveIncomeNFT public immutable nftContract;\\n    IRouter public immutable router;\\n\\n    uint256 public fee = 0; // 0%\\n\\n    address public feeCollector;\\n\\n    mapping(address => bool) _isPaymentToken;\\n    mapping(uint256 => MarketItem) public _idToMarketItem;\\n    mapping(address => Collection) public _itemsByOwner;\\n    mapping(address => address[]) private _routerPaths;\\n\\n    address[] private _paymentTokens;\\n\\n    Collection private _listedItems;\\n\\n    event MarketItemCreated(\\n        uint256 indexed tokenId,\\n        address indexed seller,\\n        address paymentToken,\\n        uint256 price\\n    );\\n\\n    event MarketItemUpdated(\\n        uint256 indexed tokenId,\\n        address indexed seller,\\n        address paymentToken,\\n        uint256 price\\n    );\\n\\n    event MarketItemSold(\\n        uint256 indexed tokenId,\\n        address indexed seller,\\n        address indexed buyer,\\n        address paymentToken,\\n        uint256 price,\\n        uint256 feeAmount\\n    );\\n\\n    event MarketItemDelisted(uint256 indexed tokenId);\\n\\n    constructor(\\n        address usdcAddress,\\n        address nftContractAddress,\\n        address routerAddress\\n    ) {\\n        USDC = IERC20(usdcAddress);\\n        _paymentTokens.push(usdcAddress);\\n        _isPaymentToken[usdcAddress] = true;\\n        nftContract = PassiveIncomeNFT(nftContractAddress);\\n        _listedItems = new Collection();\\n        router = IRouter(routerAddress);\\n    }\\n\\n    /**\\n     * @dev Sets the TX fee that is applied to each purchase.\\n     */\\n    function setFee(uint256 fee_) external onlyOwner {\\n        require(feeCollector != address(0), \\\"fee collector not set\\\");\\n        require(fee_ <= 10000, \\\"invalid fee\\\");\\n        fee = fee_;\\n    }\\n\\n    /**\\n     * @dev Sets the address where TX fees are being sent to.\\n     */\\n    function setFeeCollector(address feeCollector_) external onlyOwner {\\n        require(\\n            feeCollector_ != address(0) || fee == 0,\\n            \\\"invalid fee collector\\\"\\n        );\\n        feeCollector = feeCollector_;\\n    }\\n\\n    /**\\n     * @dev Adds a new token as payment option.\\n     */\\n    function addPaymentToken(address tokenAddress, address[] memory routerPath)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            (tokenAddress == address(USDC) && routerPath.length == 0) ||\\n                (tokenAddress != address(USDC) &&\\n                    routerPath[0] == tokenAddress &&\\n                    routerPath[routerPath.length - 1] == address(USDC)),\\n            \\\"invalid route\\\"\\n        );\\n        if (!_isPaymentToken[tokenAddress]) {\\n            _paymentTokens.push(tokenAddress);\\n            _isPaymentToken[tokenAddress] = true;\\n        }\\n        _routerPaths[tokenAddress] = routerPath;\\n    }\\n\\n    /**\\n     * @dev Removes a token from payment options.\\n     */\\n    function removePaymentToken(address tokenAddress) external onlyOwner {\\n        require(tokenAddress != address(USDC));\\n        delete _isPaymentToken[tokenAddress];\\n        delete _routerPaths[tokenAddress];\\n        uint256 len = _paymentTokens.length;\\n        bool shift;\\n        for (uint256 i = 0; i < len; i++) {\\n            if (shift) {\\n                _paymentTokens[i - 1] = _paymentTokens[i];\\n            } else if (_paymentTokens[i] == tokenAddress) {\\n                shift = true;\\n            }\\n        }\\n        if (shift) _paymentTokens.pop();\\n    }\\n\\n    /**\\n     * @dev Returns all valid payment tokens.\\n     */\\n    function getPaymentTokens() external view returns (address[] memory) {\\n        return _paymentTokens;\\n    }\\n\\n    /**\\n     * @dev Returns the swap route for the given token.\\n     */\\n    function getSwapRoute(address tokenAddress)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return _routerPaths[tokenAddress];\\n    }\\n\\n    /**\\n     * @dev Lists an item for sale on the marketplace.\\n     * The item itself will be transferred to the marketplace.\\n     */\\n    function listMarketItem(\\n        uint256 tokenId,\\n        address paymentToken,\\n        uint256 price\\n    ) external nonReentrant {\\n        require(_isPaymentToken[paymentToken], \\\"invalid payment token\\\");\\n        address seller = msg.sender;\\n        address owner = nftContract.ownerOf(tokenId);\\n        require(\\n            owner == seller ||\\n                (owner == address(this) &&\\n                    _idToMarketItem[tokenId].seller == seller),\\n            \\\"caller is not the owner\\\"\\n        );\\n\\n        _idToMarketItem[tokenId] = MarketItem(\\n            tokenId,\\n            seller,\\n            address(this),\\n            paymentToken,\\n            price,\\n            true\\n        );\\n\\n        if (seller == owner) {\\n            nftContract.transferFrom(seller, address(this), tokenId);\\n            emit MarketItemCreated(tokenId, seller, paymentToken, price);\\n        } else {\\n            emit MarketItemUpdated(tokenId, seller, paymentToken, price);\\n        }\\n    }\\n\\n    /**\\n     * @dev Delists an item from the marketplace.\\n     * The item itself will be transferred back to the seller.\\n     */\\n    function delistMarketItem(uint256 tokenId) external nonReentrant {\\n        MarketItem storage item = _idToMarketItem[tokenId];\\n\\n        address seller = item.seller;\\n\\n        require(item.tokenId == tokenId, \\\"unlisted token\\\");\\n        require(seller == msg.sender, \\\"caller is not the seller\\\");\\n\\n        nftContract.transferFrom(address(this), seller, tokenId);\\n\\n        item.seller = address(0);\\n        item.owner = seller;\\n        item.listed = false;\\n\\n        emit MarketItemDelisted(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sells the market item.\\n     * Funds will be transferred to the seller.\\n     * The ownership of the item will be transferred to the buyer.\\n     */\\n    function purchaseMarketItem(uint256 tokenId) external nonReentrant {\\n        MarketItem storage item = _idToMarketItem[tokenId];\\n\\n        require(item.tokenId == tokenId && item.listed, \\\"invalid item\\\");\\n\\n        address buyer = msg.sender;\\n        uint256 price = item.price;\\n        uint256 feeAmount;\\n\\n        if (price > 0) {\\n            IERC20 paymentToken = IERC20(item.paymentToken);\\n            paymentToken.safeTransferFrom(buyer, address(this), price);\\n            address[] storage path = _routerPaths[item.paymentToken];\\n            feeAmount = (price * fee) / 10000;\\n            uint256 payout = price - feeAmount;\\n            if (fee > 0 && path.length > 0) {\\n                paymentToken.approve(address(router), feeAmount);\\n                uint256[] memory amounts = router.swapExactTokensForTokens(\\n                    feeAmount,\\n                    0,\\n                    path,\\n                    address(this),\\n                    block.timestamp\\n                );\\n                feeAmount = amounts[amounts.length - 1];\\n            }\\n            if (feeAmount > 0) {\\n                paymentToken.transfer(feeCollector, feeAmount);\\n            }\\n            paymentToken.transfer(item.seller, payout);\\n        }\\n\\n        // transfer NFT to new owner\\n        nftContract.safeTransferFrom(address(this), buyer, item.tokenId);\\n\\n        item.listed = false;\\n\\n        emit MarketItemSold(\\n            item.tokenId,\\n            item.seller,\\n            buyer,\\n            item.paymentToken,\\n            item.price,\\n            feeAmount\\n        );\\n    }\\n\\n    /**\\n     * @dev Called by NFT contract after a token was burned.\\n     */\\n    function afterBurnToken(uint256 tokenId) external override {\\n        require(_isBurned(tokenId), \\\"token is not burned\\\");\\n        delete _idToMarketItem[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the market item for the provided id.\\n     */\\n    function getMarketItem(uint256 itemId)\\n        external\\n        view\\n        returns (MarketItem memory)\\n    {\\n        return _idToMarketItem[itemId];\\n    }\\n\\n    /**\\n     * @dev Returns a page of listed market items.\\n     */\\n    function fetchMarketItems(\\n        uint256 lastItemId,\\n        uint256 pageSize,\\n        bool ascending\\n    ) external view returns (MarketItem[] memory items) {\\n        (Collection.Item memory first, uint256 numItems) = _countRemainingItems(\\n            _listedItems,\\n            lastItemId,\\n            ascending,\\n            pageSize\\n        );\\n        items = new MarketItem[](numItems);\\n        Collection.Item memory current = first;\\n        for (uint256 i = 0; i < numItems; i++) {\\n            items[i] = _idToMarketItem[current.itemId];\\n            current = _listedItems.getNext(current, ascending);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a page of listed market items.\\n     */\\n    function fetchItemsByOwner(\\n        address owner,\\n        uint256 lastItemId,\\n        uint256 pageSize,\\n        bool ascending\\n    ) public view returns (MarketItem[] memory items) {\\n        Collection collection = _itemsByOwner[owner];\\n        if (address(collection) != address(0)) {\\n            (\\n                Collection.Item memory first,\\n                uint256 numItems\\n            ) = _countRemainingItems(\\n                    collection,\\n                    lastItemId,\\n                    ascending,\\n                    pageSize\\n                );\\n            items = new MarketItem[](numItems);\\n            Collection.Item memory current = first;\\n            for (uint256 i = 0; i < numItems; i++) {\\n                items[i] = _idToMarketItem[current.itemId];\\n                current = collection.getNext(current, ascending);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a list of items.\\n     */\\n    function fetchItems(uint256[] calldata itemIds)\\n        public\\n        view\\n        returns (MarketItem[] memory items)\\n    {\\n        uint256 len = itemIds.length;\\n        if (len > 0) {\\n            items = new MarketItem[](len);\\n            for (uint256 i = 0; i < len; i++) {\\n                items[i] = _idToMarketItem[itemIds[i]];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total value for all items of the given owner.\\n     */\\n    function totalValueByOwner(address owner)\\n        external\\n        view\\n        returns (uint256 totalValue, uint256 freeClaimable)\\n    {\\n        uint256 numTokens = nftContract.balanceOf(owner);\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            uint256 tokenId = nftContract.tokenOfOwnerByIndex(owner, i);\\n            (\\n                ,\\n                ,\\n                uint256 lockedAmount,\\n                ,\\n                uint256 claimed,\\n                uint256 maxPayout\\n            ) = nftContract.locks(tokenId);\\n            totalValue += lockedAmount + maxPayout - claimed;\\n            (uint256 free, ) = nftContract.claimableIncome(tokenId);\\n            freeClaimable += free;\\n        }\\n    }\\n\\n    function updateTokenOwner(\\n        uint256 tokenId,\\n        address from,\\n        address to\\n    ) external override {\\n        require(\\n            msg.sender == address(nftContract),\\n            \\\"caller is not the NFT contract\\\"\\n        );\\n        if (from != address(0)) {\\n            _itemsByOwner[from].safeRemove(tokenId);\\n        }\\n        if (to != address(0)) {\\n            _itemsByOwner.safeAdd(to, tokenId);\\n        }\\n    }\\n\\n    function _countRemainingItems(\\n        Collection collection,\\n        uint256 lastItemId,\\n        bool ascending,\\n        uint256 limit\\n    )\\n        private\\n        view\\n        returns (Collection.Item memory firstItem, uint256 numItems)\\n    {\\n        firstItem = lastItemId == 0\\n            ? collection.first(ascending)\\n            : collection.getNext(collection.get(lastItemId), ascending);\\n        Collection.Item memory current = firstItem;\\n        for (uint256 i = limit; i > 0 && current.itemId != 0; i--) {\\n            numItems++;\\n            current = collection.getNext(current, ascending);\\n        }\\n    }\\n\\n    function _isBurned(uint256 tokenId) private view returns (bool) {\\n        try IERC721(nftContract).ownerOf(tokenId) returns (address owner) {\\n            return owner == address(0);\\n        } catch {\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb3e7aca7412806da4f28415fc6dd1f19fa338d584a3459f5f18292e8f88103b9\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/PassiveIncomeCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Globals.sol\\\";\\n\\nabstract contract IPassiveIncomeCalculator {\\n    function claimableIncome(\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256 currentTime,\\n        uint256 startBalance,\\n        uint256 endBalance,\\n        uint256 claimed\\n    ) external view virtual returns (uint256, uint256);\\n\\n    function determineMultiplier(\\n        uint256 start,\\n        uint256 end,\\n        uint256 timestamp,\\n        uint256 lockDurationInMonths\\n    ) public view virtual returns (uint256);\\n\\n    function determineMultipliers(\\n        uint256 start,\\n        uint256 end,\\n        uint256 timestamp,\\n        uint256[] calldata lockDurationsInMonths\\n    ) external view virtual returns (uint256[] memory);\\n}\\n\\ncontract PassiveIncomeCalculator is IPassiveIncomeCalculator {\\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\\n        uint256 z = (x + 1) / 2;\\n        y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n    }\\n\\n    function _totalPayout(\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256 currentTime,\\n        uint256 startBalance,\\n        uint256 multiplier\\n    ) private pure returns (uint256) {\\n        if (currentTime == endTime) {\\n            return (startBalance * multiplier) / 1e18;\\n        }\\n        return\\n            (startBalance * multiplier * (currentTime - startTime)**2) /\\n            (1e18 * (endTime - startTime)**2);\\n    }\\n\\n    function claimableIncome(\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256 currentTime,\\n        uint256 startBalance,\\n        uint256 multiplier,\\n        uint256 claimed\\n    ) external pure override returns (uint256 freeClaim, uint256 maxClaim) {\\n        if (currentTime > endTime) {\\n            currentTime = endTime;\\n        }\\n        maxClaim = _totalPayout(\\n            startTime,\\n            endTime,\\n            currentTime,\\n            startBalance,\\n            multiplier - 1e18\\n        );\\n        if (claimed > 0) {\\n            if (claimed >= maxClaim) {\\n                maxClaim = 0;\\n            } else {\\n                maxClaim -= claimed;\\n            }\\n        }\\n        if (currentTime == endTime) {\\n            freeClaim = maxClaim;\\n        } else {\\n            freeClaim =\\n                (((((currentTime - startTime) * 1e9) / (endTime - startTime)) **\\n                    2) * maxClaim) /\\n                1e18;\\n        }\\n    }\\n\\n    function determineMultiplier(\\n        uint256 start,\\n        uint256 end,\\n        uint256 timestamp,\\n        uint256 lockDurationInMonths\\n    ) public pure override returns (uint256) {\\n        uint256 base;\\n        uint256 adjustedEnd = end - MIN_LOCK_DURATION * 30 * 86400;\\n        if (timestamp >= adjustedEnd) {\\n            return 1e18;\\n        }\\n        uint256 eod5 = start + 86400 * 5;\\n        if (timestamp >= eod5) {\\n            // after day 5\\n            base = 5e18;\\n            if (timestamp < adjustedEnd) {\\n                base +=\\n                    (10e18 * (adjustedEnd - timestamp)) /\\n                    (adjustedEnd - eod5);\\n            }\\n        } else if (timestamp >= start + 86400 * 4) {\\n            // after day 4\\n            base = 15e18;\\n        } else if (timestamp >= start + 86400 * 3) {\\n            // after day 3\\n            base = 175e17;\\n        } else if (timestamp >= start + 86400 * 2) {\\n            // after day 2\\n            base = 20e18;\\n        } else if (timestamp >= start + 86400) {\\n            // after day 1\\n            base = 225e17;\\n        } else {\\n            // day 1\\n            assert(timestamp >= start);\\n            base = 25e18;\\n        }\\n        if (lockDurationInMonths < MAX_LOCK_DURATION) {\\n            base =\\n                (base *\\n                    (((lockDurationInMonths * 1e9) / MAX_LOCK_DURATION)**2)) /\\n                1e18;\\n            if (base < 1e18) {\\n                base = 1e18;\\n            }\\n        }\\n        return base;\\n    }\\n\\n    function determineMultipliers(\\n        uint256 start,\\n        uint256 end,\\n        uint256 timestamp,\\n        uint256[] calldata lockDurationsInMonths\\n    ) external pure override returns (uint256[] memory multipliers) {\\n        uint256 len = lockDurationsInMonths.length;\\n        multipliers = new uint256[](len);\\n        while (len > 0) {\\n            len--;\\n            multipliers[len] = determineMultiplier(\\n                start,\\n                end,\\n                timestamp,\\n                lockDurationsInMonths[len]\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b3cec670ab04510cd4e422df1ccf3df9cf55225e0cf03bd66b52ae2078d66a\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/PassiveIncomeNFT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./interfaces/ERC20Burnable.sol\\\";\\nimport \\\"./interfaces/ERC20Mintable.sol\\\";\\nimport \\\"./interfaces/RevenueShare.sol\\\";\\nimport \\\"./utils/Base64.sol\\\";\\nimport \\\"./PassiveIncomeCalculator.sol\\\";\\nimport \\\"./interfaces/IMarketplace.sol\\\";\\n\\n// solhint-disable not-rely-on-time\\ncontract PassiveIncomeNFT is ERC721Enumerable, AccessControl {\\n    event Claim(\\n        address indexed account,\\n        uint256 indexed tokenId,\\n        uint256 value\\n    );\\n\\n    bytes32 public constant EARLY_MINTER_ROLE = keccak256(\\\"EARLY_MINTER\\\");\\n    bytes32 public constant REVENUE_MANAGER_ROLE = keccak256(\\\"REVENUE_MANAGER\\\");\\n    bytes32 public constant MIGRATOR_ROLE = keccak256(\\\"MIGRATOR\\\");\\n    struct Lock {\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 lockedAmount;\\n        uint256 multiplier;\\n        uint256 claimed;\\n        uint256 maxPayout;\\n    }\\n\\n    uint256 public immutable boostStartTime;\\n    uint256 public immutable boostEndTime;\\n\\n    mapping(uint256 => Lock) public locks;\\n\\n    uint8 public maxLockDuration;\\n    uint256 public totalLocked;\\n    uint256 public totalClaimed;\\n\\n    /* solhint-disable var-name-mixedcase */\\n    address private piTOKEN;\\n    IPassiveIncomeCalculator private piCALCULATOR;\\n    /* solhint-enable var-name-mixedcase */\\n\\n    uint256 private _piTokenBalance;\\n    uint256 private _tokenIds;\\n\\n    string private _imageBaseURI;\\n\\n    mapping(uint8 => uint256) private _lockDurations;\\n    mapping(uint256 => bool) private _generateRevenue;\\n\\n    RevenueShare public revenueShare;\\n    IMarketplace public marketplace;\\n\\n    constructor(\\n        address piToken,\\n        address piCalculator,\\n        uint256 start\\n    ) ERC721(\\\"PI\\\", \\\"Passive Income NFT\\\") {\\n        maxLockDuration = MAX_LOCK_DURATION;\\n        boostStartTime = start;\\n        boostEndTime = start + (1440 days);\\n        piTOKEN = piToken;\\n        piCALCULATOR = IPassiveIncomeCalculator(piCalculator);\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function setMaxLockDuration(uint8 months)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        maxLockDuration = months;\\n    }\\n\\n    function setRevenueShareContract(address revenueShare_)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        revenueShare = RevenueShare(revenueShare_);\\n    }\\n\\n    function setMarketplaceContract(address marketplace_)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        marketplace = IMarketplace(marketplace_);\\n    }\\n\\n    function avgLockDuration() external view returns (uint256) {\\n        uint256 total = totalSupply();\\n        if (total == 0) return 0;\\n        uint256 sum;\\n        for (uint8 i = 2; i <= 48; i++) {\\n            sum += _lockDurations[i] * i;\\n        }\\n        return (sum * 10) / total;\\n    }\\n\\n    function burn(uint256 tokenId) external returns (uint256 amount) {\\n        address sender = msg.sender;\\n        require(sender == ownerOf(tokenId), \\\"caller is not the owner\\\");\\n        Lock memory lock = locks[tokenId];\\n        require(block.timestamp >= lock.endTime, \\\"not expired\\\");\\n        if (_generateRevenue[tokenId]) {\\n            revenueShare.updateShare(\\n                address(this),\\n                tokenId,\\n                -int256(lock.lockedAmount + lock.maxPayout)\\n            );\\n        }\\n        (amount, ) = claimableIncome(tokenId);\\n        if (amount > 0) {\\n            totalClaimed += amount;\\n        }\\n        totalLocked -= lock.lockedAmount;\\n        amount += lock.lockedAmount;\\n        uint8 lockDuration = uint8((lock.endTime - lock.startTime) / (30 days));\\n        _lockDurations[lockDuration]--;\\n        delete locks[tokenId];\\n        _burn(tokenId);\\n        marketplace.afterBurnToken(tokenId);\\n        SafeERC20.safeTransfer(IERC20(piTOKEN), sender, amount);\\n    }\\n\\n    function canEarnForAmount(uint256 amount) external view returns (bool) {\\n        uint8 duration = maxLockPeriodForAmount(amount);\\n        return\\n            duration > 0 &&\\n            piCALCULATOR.determineMultiplier(\\n                boostStartTime,\\n                boostEndTime,\\n                block.timestamp,\\n                duration\\n            ) >\\n            1e18;\\n    }\\n\\n    function claim(uint256 tokenId, uint256 amount) external {\\n        address sender = msg.sender;\\n        require(sender == ownerOf(tokenId), \\\"caller is not the owner\\\");\\n        (uint256 free, uint256 max) = claimableIncome(tokenId);\\n        require(amount <= max, \\\"amount exceeds claimable income\\\");\\n        Lock storage lock = locks[tokenId];\\n        if (amount > free) {\\n            uint256 penalized = amount - free;\\n            uint256 percentOverFree = (penalized * 1e8) / (max - free);\\n            uint256 multiplier = lock.multiplier;\\n            uint256 decreaseMultiplierBy = ((multiplier - 1e18) *\\n                percentOverFree) / 1e8;\\n            uint256 newMultiplier = multiplier - decreaseMultiplierBy;\\n            uint256 newMaxPayout = (newMultiplier * lock.lockedAmount) / 1e18;\\n            if (_generateRevenue[tokenId]) {\\n                revenueShare.updateShare(\\n                    address(this),\\n                    tokenId,\\n                    -int256(lock.maxPayout - newMaxPayout)\\n                );\\n            }\\n            uint256 burnAmount = lock.maxPayout - newMaxPayout;\\n            IERC20(piTOKEN).approve(address(this), burnAmount);\\n            ERC20Burnable(piTOKEN).burn(burnAmount);\\n            lock.multiplier = newMultiplier;\\n            lock.maxPayout = newMaxPayout;\\n        }\\n        lock.claimed += amount;\\n        if (_generateRevenue[tokenId]) {\\n            revenueShare.updateShare(address(this), tokenId, -int256(amount));\\n        }\\n        SafeERC20.safeTransfer(IERC20(piTOKEN), sender, amount);\\n        emit Claim(sender, tokenId, amount);\\n    }\\n\\n    function claimableIncome(uint256 tokenId)\\n        public\\n        view\\n        returns (uint256 free, uint256 max)\\n    {\\n        Lock memory lock = locks[tokenId];\\n        if (block.timestamp < boostStartTime) {\\n            return (0, 0);\\n        }\\n        if (block.timestamp >= lock.endTime) {\\n            free = max = lock.maxPayout - lock.claimed;\\n        } else {\\n            (free, max) = piCALCULATOR.claimableIncome(\\n                lock.startTime,\\n                lock.endTime,\\n                block.timestamp,\\n                lock.lockedAmount,\\n                lock.multiplier,\\n                lock.claimed\\n            );\\n            max -= lock.claimed;\\n            if (free < lock.claimed) {\\n                free = 0;\\n            } else {\\n                free -= lock.claimed;\\n            }\\n        }\\n        return (free, max);\\n    }\\n\\n    function claimableIncomes(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (uint256[] memory free, uint256[] memory max)\\n    {\\n        uint256 len = tokenIds.length;\\n        free = new uint256[](len);\\n        max = new uint256[](len);\\n        while (len > 0) {\\n            (uint256 free_, uint256 max_) = claimableIncome(tokenIds[--len]);\\n            free[len] = free_;\\n            max[len] = max_;\\n        }\\n    }\\n\\n    function mint(\\n        address minter,\\n        uint256 lockedAmount,\\n        uint8 lockDurationInMonths,\\n        bool onlyLock,\\n        bool generateRevenue\\n    ) external returns (uint256 tokenId) {\\n        require(\\n            lockDurationInMonths >= MIN_LOCK_DURATION &&\\n                lockDurationInMonths <= maxLockDuration,\\n            \\\"invalid lock duration\\\"\\n        );\\n        tokenId = ++_tokenIds;\\n        Lock memory lock;\\n        if (block.timestamp >= boostStartTime) {\\n            lock.startTime = block.timestamp;\\n        } else {\\n            require(hasRole(EARLY_MINTER_ROLE, msg.sender), \\\"too early\\\");\\n            lock.startTime = boostStartTime;\\n        }\\n        lock.endTime = lock.startTime + uint256(lockDurationInMonths) * 30 days;\\n        lock.lockedAmount = lockedAmount;\\n        if (onlyLock) {\\n            lock.multiplier = 1e18;\\n            lock.maxPayout = 0;\\n        } else {\\n            lock.multiplier = piCALCULATOR.determineMultiplier(\\n                boostStartTime,\\n                boostEndTime,\\n                lock.startTime,\\n                lockDurationInMonths\\n            );\\n            lock.maxPayout = (lockedAmount * (lock.multiplier - 1e18)) / 1e18;\\n        }\\n        locks[tokenId] = lock;\\n        totalLocked += lockedAmount;\\n        _lockDurations[lockDurationInMonths]++;\\n        SafeERC20.safeTransferFrom(\\n            IERC20(piTOKEN),\\n            msg.sender,\\n            address(this),\\n            lockedAmount\\n        );\\n        ERC20Mintable(piTOKEN).mint(lock.maxPayout);\\n        _mint(minter, tokenId);\\n        if (_generateRevenue[tokenId] = generateRevenue) {\\n            revenueShare.updateShare(\\n                address(this),\\n                tokenId,\\n                int256(lock.lockedAmount + lock.maxPayout)\\n            );\\n        }\\n    }\\n\\n    function migrate(\\n        address owner,\\n        uint256 lockedAmount,\\n        uint256 multiplier,\\n        uint8 lockDurationInMonths,\\n        uint256 claimed,\\n        uint256 maxPayout\\n    ) external onlyRole(MIGRATOR_ROLE) returns (uint256 tokenId) {\\n        tokenId = ++_tokenIds;\\n        Lock memory lock;\\n        if (block.timestamp >= boostStartTime) {\\n            lock.startTime = block.timestamp;\\n        } else {\\n            lock.startTime = boostStartTime;\\n        }\\n        lock.endTime = lock.startTime + uint256(lockDurationInMonths) * 30 days;\\n        lock.lockedAmount = lockedAmount;\\n        lock.multiplier = multiplier;\\n        lock.claimed = claimed;\\n        lock.maxPayout = maxPayout;\\n        locks[tokenId] = lock;\\n        totalLocked += lockedAmount;\\n        _lockDurations[lockDurationInMonths]++;\\n        ERC20Mintable(piTOKEN).mint(lockedAmount + lock.maxPayout);\\n        _mint(owner, tokenId);\\n        _generateRevenue[tokenId] = true;\\n        revenueShare.updateShare(\\n            address(this),\\n            tokenId,\\n            int256(lock.lockedAmount + lock.maxPayout)\\n        );\\n    }\\n\\n    function maxLockPeriodForAmount(uint256 lockedAmount)\\n        public\\n        view\\n        returns (uint8)\\n    {\\n        uint256 totalSupply = IERC20(piTOKEN).totalSupply();\\n        for (\\n            uint8 duration = maxLockDuration;\\n            duration >= MIN_LOCK_DURATION;\\n            duration--\\n        ) {\\n            uint256 multiplier = piCALCULATOR.determineMultiplier(\\n                boostStartTime,\\n                boostEndTime,\\n                block.timestamp,\\n                duration\\n            );\\n            uint256 maxPayout = (lockedAmount * (multiplier - 1e18)) / 1e18;\\n            if (maxPayout + totalSupply <= 33333333e18) {\\n                return duration;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function setGenerateRevenue(uint256 tokenId, bool generate)\\n        external\\n        onlyRole(REVENUE_MANAGER_ROLE)\\n    {\\n        _generateRevenue[tokenId] = generate;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721Enumerable, AccessControl)\\n        returns (bool)\\n    {\\n        return\\n            ERC721Enumerable.supportsInterface(interfaceId) ||\\n            AccessControl.supportsInterface(interfaceId);\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\":\\\"Passive Income NFT (3,3)+\\\",\\\"description\\\":\\\"\\\",\\\"attributes\\\":\\\"\\\",\\\"image\\\":\\\"',\\n                                _imageBaseURI,\\n                                Strings.toString(tokenId),\\n                                '\\\"}'\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function setImageBaseURI(string memory baseURI)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        _imageBaseURI = baseURI;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n        marketplace.updateTokenOwner(tokenId, from, to);\\n    }\\n}\\n\",\"keccak256\":\"0x4dfffd8c3a89d6e41fd906c83ff8eba364cc89bcb010a377d6de58d5c596a799\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nabstract contract ERC20Burnable {\\n    function burn(uint256 amount) public virtual {\\n        burnFrom(msg.sender, amount);\\n    }\\n\\n    function burnFrom(address who, uint256 amount) public virtual;\\n}\\n\",\"keccak256\":\"0x54226021515e52b0ebe9da86fe211b9e5d7904d62052c4433113d6d8bd1c3bfc\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/ERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nabstract contract ERC20Mintable {\\n    function mint(uint256 amount) public virtual {\\n        mintFor(msg.sender, amount);\\n    }\\n\\n    function mintFor(address who, uint256 amount) public virtual;\\n}\\n\",\"keccak256\":\"0x7dfbeecc1df9f59a808b4606f4d497463f9eb679da6615e208397d3756e9cfde\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\ninterface IMarketplace {\\n    function afterBurnToken(uint256 tokenId) external;\\n\\n    function updateTokenOwner(\\n        uint256 tokenId,\\n        address from,\\n        address to\\n    ) external;\\n}\\n\",\"keccak256\":\"0x21c7338ed653b755c5d87056c97651682bcc6be029ea1aabfdb5fc9b97c17027\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\ninterface IRouter {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x3fc72b6a43b896978f4969a48ff8a3b01d862a535caaa8af3cc31548cdcd00ba\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/RevenueShare.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\ninterface RevenueShare {\\n    function claimableForToken(address contractAddress, uint256 tokenId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function claimableForTokens(\\n        address[] memory contractAddresses,\\n        uint256[] memory tokenIds\\n    ) external view returns (uint256[] memory);\\n\\n    function deposit(uint256 amount) external;\\n\\n    function updateShare(\\n        address contractAddress,\\n        uint256 tokenId,\\n        int256 amount\\n    ) external;\\n\\n    function unregisterContract(address contractAddress) external;\\n}\\n\",\"keccak256\":\"0xbe7af3493c32f9b3bfaa4db98b7645c3f3122987b507ea24720daeac46411013\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n    bytes internal constant TABLE =\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\\n                )\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\\n\",\"keccak256\":\"0xf07ba0116b91bfccdd8ce9b9615bc8249d818ac0c25c72cc53fea3aa69569c4c\",\"license\":\"MIT\"},\"contracts/utils/Collection.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\ncontract Collection {\\n    struct Item {\\n        uint256 prev;\\n        uint256 next;\\n        uint256 itemId;\\n    }\\n\\n    uint256 public size;\\n    uint256 private _head;\\n    uint256 private _tail;\\n\\n    address private immutable _owner;\\n\\n    mapping(uint256 => Item) private _items;\\n\\n    constructor() {\\n        _owner = msg.sender;\\n    }\\n\\n    function append(uint256 itemId) public onlyOwner {\\n        Item memory item;\\n        item.itemId = itemId;\\n        if (size++ == 0) {\\n            _head = _tail = itemId;\\n        } else {\\n            item.prev = _tail;\\n            _items[_tail].next = itemId;\\n            _tail = itemId;\\n        }\\n        _items[itemId] = item;\\n    }\\n\\n    function remove(uint256 itemId) public onlyOwner {\\n        uint256 prev = _items[itemId].prev;\\n        uint256 next = _items[itemId].next;\\n        if (--size == 0) {\\n            _head = _tail = 0;\\n        } else {\\n            if (_head == itemId) {\\n                _head = _items[itemId].next;\\n            }\\n            if (_tail == itemId) {\\n                _tail = _items[itemId].prev;\\n            }\\n            _items[prev].next = next;\\n            _items[next].prev = prev;\\n        }\\n        delete _items[itemId];\\n    }\\n\\n    function get(uint256 id) public view returns (Item memory) {\\n        return _items[id];\\n    }\\n\\n    function getNext(Item memory current, bool ascending)\\n        public\\n        view\\n        returns (Item memory)\\n    {\\n        return get(ascending ? current.next : current.prev);\\n    }\\n\\n    function head() public view returns (Item memory) {\\n        return _items[_head];\\n    }\\n\\n    function tail() public view returns (Item memory) {\\n        return _items[_tail];\\n    }\\n\\n    function first(bool ascending) public view returns (Item memory) {\\n        return ascending ? head() : tail();\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xea96506012e1db4b50692318632fcb18fa1c6977b577b38e743afc097ba33ac2\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/utils/SafeCollection.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Collection.sol\\\";\\n\\nlibrary SafeCollection {\\n    function safeAdd(\\n        mapping(address => Collection) storage collections,\\n        address who,\\n        uint256 itemId\\n    ) public {\\n        Collection collection = collections[who];\\n        if (address(collection) == address(0)) {\\n            collections[who] = collection = new Collection();\\n        }\\n        collection.append(itemId);\\n    }\\n\\n    function safeRemove(Collection collection, uint256 itemId) public {\\n        if (address(collection) != address(0)) {\\n            collection.remove(itemId);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x660c30e47a488c97a80e7dbda73423cb662d2171a142a5d4df9b892f85e73df7\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60e060405260006002553480156200001657600080fd5b5060405162003d4638038062003d468339810160408190526200003991620001a5565b62000044336200012a565b60018080556001600160601b0319606085811b8216608052600880548085019091557ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b03881690811790915560009081526004602052604090819020805460ff191690941790935584901b1660a05251620000d3906200017a565b604051809103906000f080158015620000f0573d6000803e3d6000fd5b50600980546001600160a01b0319166001600160a01b039290921691909117905560601b6001600160601b03191660c05250620001ee9050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6106c0806200368683390190565b80516001600160a01b0381168114620001a057600080fd5b919050565b600080600060608486031215620001ba578283fd5b620001c58462000188565b9250620001d56020850162000188565b9150620001e56040850162000188565b90509250925092565b60805160601c60a05160601c60c05160601c6133ef62000297600039600081816105340152818161183c01526118fb0152600081816104e30152818161085201528181610ad301528181610c51015281816111e0015281816112ab015281816113300152818161143301528181611b2c0152818161225901526128c201526000818161032601528181610f7801528181610fbe015281816110400152611d4201526133ef6000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c8063a42dce80116100ee578063ca5e553e11610097578063d56d229d11610071578063d56d229d146104de578063ddca3f4314610505578063f2fde38b1461051c578063f887ea401461052f57600080fd5b8063ca5e553e1461049a578063caa67fa1146104a2578063d1817ceb146104b557600080fd5b8063c415b95c116100c8578063c415b95c146103bd578063c68a0e16146103d0578063c7be7a49146103e357600080fd5b8063a42dce8014610384578063a512542114610397578063ab1a5369146103aa57600080fd5b80637042bdb91161015b5780637d59169e116101355780637d59169e1461028d57806389a30271146103215780638c77b5b7146103605780638da5cb5b1461037357600080fd5b80637042bdb91461024a578063715018a6146102725780637488cc8f1461027a57600080fd5b806356d7cc051161018c57806356d7cc051461021157806369fe0e2d146102245780636c187e871461023757600080fd5b806314d50035146101b357806324d68c60146101dc578063295f36de146101f1575b600080fd5b6101c66101c1366004612d50565b610556565b6040516101d391906130bd565b60405180910390f35b6101ef6101ea366004612f84565b610772565b005b6102046101ff366004612c62565b610bd0565b6040516101d39190613070565b6101ef61021f366004612f43565b610c46565b6101ef610232366004612f13565b610e13565b6101ef610245366004612c9a565b610f1c565b61025d610258366004612c62565b6111a1565b604080519283526020830191909152016101d3565b6101ef6114da565b6101c6610288366004612d99565b611540565b6102e261029b366004612f13565b600560208190526000918252604090912080546001820154600283015460038401546004850154949095015492946001600160a01b03928316949183169392169160ff1686565b604080519687526001600160a01b03958616602088015293851693860193909352921660608401526080830191909152151560a082015260c0016101d3565b6103487f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101d3565b6101ef61036e366004612f13565b6116bf565b6000546001600160a01b0316610348565b6101ef610392366004612c62565b611c07565b6101ef6103a5366004612c62565b611ce6565b6101c66103b8366004612fde565b611f05565b600354610348906001600160a01b031681565b6101ef6103de366004612f13565b61210d565b61048d6103f1366004612f13565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915250600090815260056020818152604092839020835160c0810185528154815260018201546001600160a01b039081169382019390935260028201548316948101949094526003810154909116606084015260048101546080840152015460ff16151560a082015290565b6040516101d3919061317a565b610204612320565b6101ef6104b0366004612f13565b612382565b6103486104c3366004612c62565b6006602052600090815260409020546001600160a01b031681565b6103487f000000000000000000000000000000000000000000000000000000000000000081565b61050e60025481565b6040519081526020016101d3565b6101ef61052a366004612c62565b612427565b6103487f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b038085166000908152600660205260409020546060911680156107695760008061058983888789612509565b915091508067ffffffffffffffff8111156105b457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561061457816020015b6040805160c08101825260008082526020808301829052928201819052606082018190526080820181905260a082015282526000199092019101816105d25790505b5093508160005b828110156107645760408083015160009081526005602081815291839020835160c0810185528154815260018201546001600160a01b039081169482019490945260028201548416948101949094526003810154909216606084015260048201546080840152015460ff16151560a082015286518790839081106106af57634e487b7160e01b600052603260045260246000fd5b60209081029190910181019190915260408051630e891c2760e01b815284516004820152918401516024830152830151604482015287151560648201526001600160a01b03861690630e891c279060840160606040518083038186803b15801561071857600080fd5b505afa15801561072c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107509190612eb8565b91508061075c8161334f565b91505061061b565b505050505b50949350505050565b600260015414156107ca5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026001556001600160a01b03821660009081526004602052604090205460ff166108375760405162461bcd60e51b815260206004820152601560248201527f696e76616c6964207061796d656e7420746f6b656e000000000000000000000060448201526064016107c1565b6040516331a9108f60e11b81526004810184905233906000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e9060240160206040518083038186803b15801561089c57600080fd5b505afa1580156108b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d49190612c7e565b9050816001600160a01b0316816001600160a01b0316148061092557506001600160a01b0381163014801561092557506000858152600560205260409020600101546001600160a01b038381169116145b6109715760405162461bcd60e51b815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e657200000000000000000060448201526064016107c1565b6040518060c00160405280868152602001836001600160a01b03168152602001306001600160a01b03168152602001856001600160a01b0316815260200184815260200160011515815250600560008781526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506080820151816004015560a08201518160050160006101000a81548160ff021916908315150217905550905050806001600160a01b0316826001600160a01b03161415610b7c576040516323b872dd60e01b81526001600160a01b038381166004830152306024830152604482018790527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90606401600060405180830381600087803b158015610b1757600080fd5b505af1158015610b2b573d6000803e3d6000fd5b5050604080516001600160a01b03888116825260208201889052861693508892507f60af48b7e1a8c27a8471e490b952dbd818ad363aef7884211ae333dad8a130d2910160405180910390a3610bc5565b604080516001600160a01b0386811682526020820186905284169187917fe07dd73816b1ad47d216aff1af76f3519c7a5901534f1043067cc50fc6cc7293910160405180910390a35b505060018055505050565b6001600160a01b038116600090815260076020908152604091829020805483518184028101840190945280845260609392830182828015610c3a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c1c575b50505050509050919050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610cbe5760405162461bcd60e51b815260206004820152601e60248201527f63616c6c6572206973206e6f7420746865204e465420636f6e7472616374000060448201526064016107c1565b6001600160a01b03821615610d6c576001600160a01b03828116600090815260066020526040908190205490517fc98de4ad0000000000000000000000000000000000000000000000000000000081529116600482015260248101849052737b172A3764FF711059e4682C435a5B63A9ab9a279063c98de4ad9060440160006040518083038186803b158015610d5357600080fd5b505af4158015610d67573d6000803e3d6000fd5b505050505b6001600160a01b03811615610e0e576040517f832a2b31000000000000000000000000000000000000000000000000000000008152600660048201526001600160a01b038216602482015260448101849052737b172A3764FF711059e4682C435a5B63A9ab9a279063832a2b319060640160006040518083038186803b158015610df557600080fd5b505af4158015610e09573d6000803e3d6000fd5b505050505b505050565b6000546001600160a01b03163314610e6d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c1565b6003546001600160a01b0316610ec55760405162461bcd60e51b815260206004820152601560248201527f66656520636f6c6c6563746f72206e6f7420736574000000000000000000000060448201526064016107c1565b612710811115610f175760405162461bcd60e51b815260206004820152600b60248201527f696e76616c69642066656500000000000000000000000000000000000000000060448201526064016107c1565b600255565b6000546001600160a01b03163314610f765760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316148015610fb657508051155b806110a857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141580156110375750816001600160a01b03168160008151811061102457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316145b80156110a857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001835161107791906132f5565b8151811061109557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316145b6110f45760405162461bcd60e51b815260206004820152600d60248201527f696e76616c696420726f7574650000000000000000000000000000000000000060448201526064016107c1565b6001600160a01b03821660009081526004602052604090205460ff16611178576008805460018082019092557ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b0385169081179091556000908152600460205260409020805460ff191690911790555b6001600160a01b03821660009081526007602090815260409091208251610e0e92840190612bce565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152600091829182917f0000000000000000000000000000000000000000000000000000000000000000909116906370a082319060240160206040518083038186803b15801561122457600080fd5b505afa158015611238573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125c9190612f2b565b905060005b818110156114d3576040517f2f745c590000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018390526000917f000000000000000000000000000000000000000000000000000000000000000090911690632f745c599060440160206040518083038186803b1580156112ef57600080fd5b505afa158015611303573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113279190612f2b565b905060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f4dadc61856040518263ffffffff1660e01b815260040161137c91815260200190565b60c06040518083038186803b15801561139457600080fd5b505afa1580156113a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cc919061300b565b9550955050945050508181846113e2919061329e565b6113ec91906132f5565b6113f6908961329e565b6040517f49a0f36c000000000000000000000000000000000000000000000000000000008152600481018690529098506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906349a0f36c90602401604080518083038186803b15801561147457600080fd5b505afa158015611488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ac9190612fbb565b5090506114b9818961329e565b9750505050505080806114cb9061334f565b915050611261565b5050915091565b6000546001600160a01b031633146115345760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c1565b61153e60006127e4565b565b60608180156116b8578067ffffffffffffffff81111561157057634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156115d057816020015b6040805160c08101825260008082526020808301829052928201819052606082018190526080820181905260a0820152825260001990920191018161158e5790505b50915060005b818110156116b6576005600086868481811061160257634e487b7160e01b600052603260045260246000fd5b60209081029290920135835250818101929092526040908101600020815160c0810183528154815260018201546001600160a01b03908116948201949094526002820154841692810192909252600381015490921660608201526004820154608082015260059091015460ff16151560a0820152835184908390811061169857634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806116ae9061334f565b9150506115d6565b505b5092915050565b600260015414156117125760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107c1565b600260015560008181526005602052604090208054821480156117395750600581015460ff165b6117855760405162461bcd60e51b815260206004820152600c60248201527f696e76616c6964206974656d000000000000000000000000000000000000000060448201526064016107c1565b6004810154339060008115611ae45760038401546001600160a01b03166117ae81853086612834565b60038501546001600160a01b03166000908152600760205260409020600254612710906117db90866132d6565b6117e591906132b6565b925060006117f384866132f5565b905060006002541180156118075750815415155b156119c9576040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820186905284169063095ea7b390604401602060405180830381600087803b15801561188f57600080fd5b505af11580156118a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c79190612e9c565b506040517f38ed17390000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906338ed17399061193890889085908890309042906004016131d6565b600060405180830381600087803b15801561195257600080fd5b505af1158015611966573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261198e9190810190612e09565b9050806001825161199f91906132f5565b815181106119bd57634e487b7160e01b600052603260045260246000fd5b60200260200101519450505b8315611a575760035460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018690529084169063a9059cbb90604401602060405180830381600087803b158015611a1d57600080fd5b505af1158015611a31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a559190612e9c565b505b600187015460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529084169063a9059cbb90604401602060405180830381600087803b158015611aa757600080fd5b505af1158015611abb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611adf9190612e9c565b505050505b83546040517f42842e0e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03858116602483015260448201929092527f0000000000000000000000000000000000000000000000000000000000000000909116906342842e0e90606401600060405180830381600087803b158015611b7257600080fd5b505af1158015611b86573d6000803e3d6000fd5b5050505060058401805460ff191690556001840154845460038601546004870154604080516001600160a01b03938416815260208101929092528101859052868216939190911691907fa1e15b108a3093b8c412f12af3fde23cabb29883c252b8525533cb658b228f569060600160405180910390a4505060018055505050565b6000546001600160a01b03163314611c615760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c1565b6001600160a01b038116151580611c785750600254155b611cc45760405162461bcd60e51b815260206004820152601560248201527f696e76616c69642066656520636f6c6c6563746f72000000000000000000000060448201526064016107c1565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314611d405760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415611d7f57600080fd5b6001600160a01b0381166000908152600460209081526040808320805460ff1916905560079091528120611db291612c33565b6008546000805b82811015611eb8578115611e5b5760088181548110611de857634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03166008611e0a6001846132f5565b81548110611e2857634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550611ea6565b836001600160a01b031660088281548110611e8657634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415611ea657600191505b80611eb08161334f565b915050611db9565b508015610e0e576008805480611ede57634e487b7160e01b600052603160045260246000fd5b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b6009546060906000908190611f25906001600160a01b0316878688612509565b915091508067ffffffffffffffff811115611f5057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611fb057816020015b6040805160c08101825260008082526020808301829052928201819052606082018190526080820181905260a08201528252600019909201910181611f6e5790505b5092508160005b828110156121025760408083015160009081526005602081815291839020835160c0810185528154815260018201546001600160a01b039081169482019490945260028201548416948101949094526003810154909216606084015260048201546080840152015460ff16151560a0820152855186908390811061204b57634e487b7160e01b600052603260045260246000fd5b60209081029190910181019190915260095460408051630e891c2760e01b815285516004820152928501516024840152840151604483015287151560648301526001600160a01b031690630e891c279060840160606040518083038186803b1580156120b657600080fd5b505afa1580156120ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ee9190612eb8565b9150806120fa8161334f565b915050611fb7565b505050509392505050565b600260015414156121605760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107c1565b6002600190815560008281526005602052604090209081015481546001600160a01b039091169083146121d55760405162461bcd60e51b815260206004820152600e60248201527f756e6c697374656420746f6b656e00000000000000000000000000000000000060448201526064016107c1565b6001600160a01b038116331461222d5760405162461bcd60e51b815260206004820152601860248201527f63616c6c6572206973206e6f74207468652073656c6c6572000000000000000060448201526064016107c1565b6040516323b872dd60e01b81523060048201526001600160a01b038281166024830152604482018590527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90606401600060405180830381600087803b15801561229d57600080fd5b505af11580156122b1573d6000803e3d6000fd5b505050506001820180546001600160a01b03199081169091556002830180549091166001600160a01b03831617905560058201805460ff1916905560405183907f46db6c5cb54312d60d4afd31412441de120d201fdfe50032cb4aab8bb0e1b79d90600090a250506001805550565b6060600880548060200260200160405190810160405280929190818152602001828054801561237857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161235a575b5050505050905090565b61238b816128a9565b6123d75760405162461bcd60e51b815260206004820152601360248201527f746f6b656e206973206e6f74206275726e65640000000000000000000000000060448201526064016107c1565b600090815260056020819052604082208281556001810180546001600160a01b0319908116909155600282018054821690556003820180549091169055600481019290925501805460ff19169055565b6000546001600160a01b031633146124815760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c1565b6001600160a01b0381166124fd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016107c1565b612506816127e4565b50565b61252d60405180606001604052806000815260200160008152602001600081525090565b60008415612674576040517f9507d39a000000000000000000000000000000000000000000000000000000008152600481018690526001600160a01b03871690630e891c27908290639507d39a9060240160606040518083038186803b15801561259657600080fd5b505afa1580156125aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ce9190612eb8565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815282516004820152602083015160248201529101516044820152861515606482015260840160606040518083038186803b15801561263757600080fd5b505afa15801561264b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266f9190612eb8565b612706565b6040517f6c94fb4400000000000000000000000000000000000000000000000000000000815284151560048201526001600160a01b03871690636c94fb449060240160606040518083038186803b1580156126ce57600080fd5b505afa1580156126e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127069190612eb8565b915081835b60008111801561271e5750604082015115155b156127d9578261272d8161334f565b60408051630e891c2760e01b8152855160048201526020860151602482015290850151604482015288151560648201529094506001600160a01b038a169150630e891c279060840160606040518083038186803b15801561278d57600080fd5b505afa1580156127a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c59190612eb8565b9150806127d181613338565b91505061270b565b505094509492505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b1790526128a3908590612958565b50505050565b6040516331a9108f60e11b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e9060240160206040518083038186803b15801561290c57600080fd5b505afa92505050801561293c575060408051601f3d908101601f1916820190925261293991810190612c7e565b60015b61294857506001919050565b6001600160a01b03161592915050565b60006129ad826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612a3d9092919063ffffffff16565b805190915015610e0e57808060200190518101906129cb9190612e9c565b610e0e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016107c1565b6060612a4c8484600085612a56565b90505b9392505050565b606082471015612ace5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016107c1565b843b612b1c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107c1565b600080866001600160a01b03168587604051612b389190613054565b60006040518083038185875af1925050503d8060008114612b75576040519150601f19603f3d011682016040523d82523d6000602084013e612b7a565b606091505b5091509150612b8a828286612b95565b979650505050505050565b60608315612ba4575081612a4f565b825115612bb45782518084602001fd5b8160405162461bcd60e51b81526004016107c19190613147565b828054828255906000526020600020908101928215612c23579160200282015b82811115612c2357825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612bee565b50612c2f929150612c4d565b5090565b508054600082559060005260206000209081019061250691905b5b80821115612c2f5760008155600101612c4e565b600060208284031215612c73578081fd5b8135612a4f81613396565b600060208284031215612c8f578081fd5b8151612a4f81613396565b60008060408385031215612cac578081fd5b8235612cb781613396565b915060208381013567ffffffffffffffff811115612cd3578283fd5b8401601f81018613612ce3578283fd5b8035612cf6612cf18261327a565b613249565b80828252848201915084840189868560051b8701011115612d15578687fd5b8694505b83851015612d40578035612d2c81613396565b835260019490940193918501918501612d19565b5080955050505050509250929050565b60008060008060808587031215612d65578182fd5b8435612d7081613396565b935060208501359250604085013591506060850135612d8e816133ab565b939692955090935050565b60008060208385031215612dab578182fd5b823567ffffffffffffffff80821115612dc2578384fd5b818501915085601f830112612dd5578384fd5b813581811115612de3578485fd5b8660208260051b8501011115612df7578485fd5b60209290920196919550909350505050565b60006020808385031215612e1b578182fd5b825167ffffffffffffffff811115612e31578283fd5b8301601f81018513612e41578283fd5b8051612e4f612cf18261327a565b80828252848201915084840188868560051b8701011115612e6e578687fd5b8694505b83851015612e90578051835260019490940193918501918501612e72565b50979650505050505050565b600060208284031215612ead578081fd5b8151612a4f816133ab565b600060608284031215612ec9578081fd5b6040516060810181811067ffffffffffffffff82111715612eec57612eec613380565b80604052508251815260208301516020820152604083015160408201528091505092915050565b600060208284031215612f24578081fd5b5035919050565b600060208284031215612f3c578081fd5b5051919050565b600080600060608486031215612f57578283fd5b833592506020840135612f6981613396565b91506040840135612f7981613396565b809150509250925092565b600080600060608486031215612f98578283fd5b833592506020840135612faa81613396565b929592945050506040919091013590565b60008060408385031215612fcd578182fd5b505080516020909101519092909150565b600080600060608486031215612ff2578081fd5b83359250602084013591506040840135612f79816133ab565b60008060008060008060c08789031215613023578384fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b6000825161306681846020870161330c565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156130b15783516001600160a01b03168352928401929184019160010161308c565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156130b1576131348385518051825260208101516001600160a01b03808216602085015280604084015116604085015280606084015116606085015250506080810151608083015260a0810151151560a08301525050565b9284019260c092909201916001016130d9565b602081526000825180602084015261316681604085016020870161330c565b601f01601f19169190910160400192915050565b60c081016131d082848051825260208101516001600160a01b03808216602085015280604084015116604085015280606084015116606085015250506080810151608083015260a0810151151560a08301525050565b92915050565b600060a082018783526020878185015260a0604085015281875480845260c0860191508885528285209350845b818110156132285784546001600160a01b031683526001948501949284019201613203565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561327257613272613380565b604052919050565b600067ffffffffffffffff82111561329457613294613380565b5060051b60200190565b600082198211156132b1576132b161336a565b500190565b6000826132d157634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156132f0576132f061336a565b500290565b6000828210156133075761330761336a565b500390565b60005b8381101561332757818101518382015260200161330f565b838111156128a35750506000910152565b6000816133475761334761336a565b506000190190565b60006000198214156133635761336361336a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461250657600080fd5b801515811461250657600080fdfea2646970667358221220b4c761be1f0839a53e8c7acb18b2b90f166b63d8921680438019023afbbcb32864736f6c6343000804003360a060405234801561001057600080fd5b5033606081901b608052610687610039600039600081816101e0015261042301526106876000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638f7dcfa31161005b5780638f7dcfa3146100f7578063949d225d146100ff5780639507d39a14610116578063e33b87071461012957600080fd5b80630e891c271461008d57806313d8c840146100c75780634cc82215146100cf5780636c94fb44146100e4575b600080fd5b6100a061009b36600461056f565b61013c565b60408051825181526020808401519082015291810151908201526060015b60405180910390f35b6100a0610180565b6100e26100dd3660046105f1565b6101de565b005b6100a06100f2366004610555565b610323565b6100a0610367565b61010860005481565b6040519081526020016100be565b6100a06101243660046105f1565b6103c4565b6100e26101373660046105f1565b610421565b61016060405180606001604052806000815260200160008152602001600081525090565b6101798261016f5783516103c4565b83602001516103c4565b9392505050565b6101a460405180606001604052806000815260200160008152602001600081525090565b5060028054600090815260036020908152604091829020825160608101845281548152600182015492810192909252909201549082015290565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633146102685760405162461bcd60e51b815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e657200000000000000000060448201526064015b60405180910390fd5b60008181526003602052604081208054600190910154825491929091819061028f90610609565b91829055506102a75760006002819055600155610303565b8260015414156102c857600083815260036020526040902060019081015490555b8260025414156102e5576000838152600360205260409020546002555b60008281526003602052604080822060010183905582825290208290555b505060009081526003602052604081208181556001810182905560020155565b61034760405180606001604052806000815260200160008152602001600081525090565b8161035957610354610180565b610361565b610361610367565b92915050565b61038b60405180606001604052806000815260200160008152602001600081525090565b50600180546000908152600360209081526040918290208251606081018452815481529381015491840191909152600201549082015290565b6103e860405180606001604052806000815260200160008152602001600081525090565b50600090815260036020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915290565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633146104a65760405162461bcd60e51b815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e6572000000000000000000604482015260640161025f565b6104ca60405180606001604052806000815260200160008152602001600081525090565b604081018290526000805490806104e083610620565b909155506104f75760028290556001829055610516565b6002805480835260009081526003602052604090206001018390558290555b60009182526003602090815260409283902082518155908201516001820155910151600290910155565b8035801515811461055057600080fd5b919050565b600060208284031215610566578081fd5b61017982610540565b6000808284036080811215610582578182fd5b606081121561058f578182fd5b506040516060810181811067ffffffffffffffff821117156105bf57634e487b7160e01b83526041600452602483fd5b60409081528435825260208086013590830152848101359082015291506105e860608401610540565b90509250929050565b600060208284031215610602578081fd5b5035919050565b6000816106185761061861063b565b506000190190565b60006000198214156106345761063461063b565b5060010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220478b77d909bdae091ca0edddd60242af2a468b1244caaa98a05f35780ea19fd264736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ae5760003560e01c8063a42dce80116100ee578063ca5e553e11610097578063d56d229d11610071578063d56d229d146104de578063ddca3f4314610505578063f2fde38b1461051c578063f887ea401461052f57600080fd5b8063ca5e553e1461049a578063caa67fa1146104a2578063d1817ceb146104b557600080fd5b8063c415b95c116100c8578063c415b95c146103bd578063c68a0e16146103d0578063c7be7a49146103e357600080fd5b8063a42dce8014610384578063a512542114610397578063ab1a5369146103aa57600080fd5b80637042bdb91161015b5780637d59169e116101355780637d59169e1461028d57806389a30271146103215780638c77b5b7146103605780638da5cb5b1461037357600080fd5b80637042bdb91461024a578063715018a6146102725780637488cc8f1461027a57600080fd5b806356d7cc051161018c57806356d7cc051461021157806369fe0e2d146102245780636c187e871461023757600080fd5b806314d50035146101b357806324d68c60146101dc578063295f36de146101f1575b600080fd5b6101c66101c1366004612d50565b610556565b6040516101d391906130bd565b60405180910390f35b6101ef6101ea366004612f84565b610772565b005b6102046101ff366004612c62565b610bd0565b6040516101d39190613070565b6101ef61021f366004612f43565b610c46565b6101ef610232366004612f13565b610e13565b6101ef610245366004612c9a565b610f1c565b61025d610258366004612c62565b6111a1565b604080519283526020830191909152016101d3565b6101ef6114da565b6101c6610288366004612d99565b611540565b6102e261029b366004612f13565b600560208190526000918252604090912080546001820154600283015460038401546004850154949095015492946001600160a01b03928316949183169392169160ff1686565b604080519687526001600160a01b03958616602088015293851693860193909352921660608401526080830191909152151560a082015260c0016101d3565b6103487f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101d3565b6101ef61036e366004612f13565b6116bf565b6000546001600160a01b0316610348565b6101ef610392366004612c62565b611c07565b6101ef6103a5366004612c62565b611ce6565b6101c66103b8366004612fde565b611f05565b600354610348906001600160a01b031681565b6101ef6103de366004612f13565b61210d565b61048d6103f1366004612f13565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915250600090815260056020818152604092839020835160c0810185528154815260018201546001600160a01b039081169382019390935260028201548316948101949094526003810154909116606084015260048101546080840152015460ff16151560a082015290565b6040516101d3919061317a565b610204612320565b6101ef6104b0366004612f13565b612382565b6103486104c3366004612c62565b6006602052600090815260409020546001600160a01b031681565b6103487f000000000000000000000000000000000000000000000000000000000000000081565b61050e60025481565b6040519081526020016101d3565b6101ef61052a366004612c62565b612427565b6103487f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b038085166000908152600660205260409020546060911680156107695760008061058983888789612509565b915091508067ffffffffffffffff8111156105b457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561061457816020015b6040805160c08101825260008082526020808301829052928201819052606082018190526080820181905260a082015282526000199092019101816105d25790505b5093508160005b828110156107645760408083015160009081526005602081815291839020835160c0810185528154815260018201546001600160a01b039081169482019490945260028201548416948101949094526003810154909216606084015260048201546080840152015460ff16151560a082015286518790839081106106af57634e487b7160e01b600052603260045260246000fd5b60209081029190910181019190915260408051630e891c2760e01b815284516004820152918401516024830152830151604482015287151560648201526001600160a01b03861690630e891c279060840160606040518083038186803b15801561071857600080fd5b505afa15801561072c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107509190612eb8565b91508061075c8161334f565b91505061061b565b505050505b50949350505050565b600260015414156107ca5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026001556001600160a01b03821660009081526004602052604090205460ff166108375760405162461bcd60e51b815260206004820152601560248201527f696e76616c6964207061796d656e7420746f6b656e000000000000000000000060448201526064016107c1565b6040516331a9108f60e11b81526004810184905233906000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e9060240160206040518083038186803b15801561089c57600080fd5b505afa1580156108b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d49190612c7e565b9050816001600160a01b0316816001600160a01b0316148061092557506001600160a01b0381163014801561092557506000858152600560205260409020600101546001600160a01b038381169116145b6109715760405162461bcd60e51b815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e657200000000000000000060448201526064016107c1565b6040518060c00160405280868152602001836001600160a01b03168152602001306001600160a01b03168152602001856001600160a01b0316815260200184815260200160011515815250600560008781526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506080820151816004015560a08201518160050160006101000a81548160ff021916908315150217905550905050806001600160a01b0316826001600160a01b03161415610b7c576040516323b872dd60e01b81526001600160a01b038381166004830152306024830152604482018790527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90606401600060405180830381600087803b158015610b1757600080fd5b505af1158015610b2b573d6000803e3d6000fd5b5050604080516001600160a01b03888116825260208201889052861693508892507f60af48b7e1a8c27a8471e490b952dbd818ad363aef7884211ae333dad8a130d2910160405180910390a3610bc5565b604080516001600160a01b0386811682526020820186905284169187917fe07dd73816b1ad47d216aff1af76f3519c7a5901534f1043067cc50fc6cc7293910160405180910390a35b505060018055505050565b6001600160a01b038116600090815260076020908152604091829020805483518184028101840190945280845260609392830182828015610c3a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c1c575b50505050509050919050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610cbe5760405162461bcd60e51b815260206004820152601e60248201527f63616c6c6572206973206e6f7420746865204e465420636f6e7472616374000060448201526064016107c1565b6001600160a01b03821615610d6c576001600160a01b03828116600090815260066020526040908190205490517fc98de4ad000000000000000000000000000000000000000000000000000000008152911660048201526024810184905273__$3858ac3bd961c38fdb0cbd1b2b1a61ed03$__9063c98de4ad9060440160006040518083038186803b158015610d5357600080fd5b505af4158015610d67573d6000803e3d6000fd5b505050505b6001600160a01b03811615610e0e576040517f832a2b31000000000000000000000000000000000000000000000000000000008152600660048201526001600160a01b03821660248201526044810184905273__$3858ac3bd961c38fdb0cbd1b2b1a61ed03$",
  "libraries": {
    "SafeCollection": "0x7b172A3764FF711059e4682C435a5B63A9ab9a27"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addPaymentToken(address,address[])": {
        "details": "Adds a new token as payment option."
      },
      "afterBurnToken(uint256)": {
        "details": "Called by NFT contract after a token was burned."
      },
      "delistMarketItem(uint256)": {
        "details": "Delists an item from the marketplace. The item itself will be transferred back to the seller."
      },
      "fetchItems(uint256[])": {
        "details": "Returns a list of items."
      },
      "fetchItemsByOwner(address,uint256,uint256,bool)": {
        "details": "Returns a page of listed market items."
      },
      "fetchMarketItems(uint256,uint256,bool)": {
        "details": "Returns a page of listed market items."
      },
      "getMarketItem(uint256)": {
        "details": "Returns the market item for the provided id."
      },
      "getPaymentTokens()": {
        "details": "Returns all valid payment tokens."
      },
      "getSwapRoute(address)": {
        "details": "Returns the swap route for the given token."
      },
      "listMarketItem(uint256,address,uint256)": {
        "details": "Lists an item for sale on the marketplace. The item itself will be transferred to the marketplace."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "purchaseMarketItem(uint256)": {
        "details": "Sells the market item. Funds will be transferred to the seller. The ownership of the item will be transferred to the buyer."
      },
      "removePaymentToken(address)": {
        "details": "Removes a token from payment options."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFee(uint256)": {
        "details": "Sets the TX fee that is applied to each purchase."
      },
      "setFeeCollector(address)": {
        "details": "Sets the address where TX fees are being sent to."
      },
      "totalValueByOwner(address)": {
        "details": "Returns the total value for all items of the given owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 389,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 497,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3443,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "fee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3445,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "feeCollector",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3449,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_isPaymentToken",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3454,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_idToMarketItem",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(MarketItem)3431_storage)"
      },
      {
        "astId": 3459,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_itemsByOwner",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_contract(Collection)9932)"
      },
      {
        "astId": 3464,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_routerPaths",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 3467,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_paymentTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3470,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_listedItems",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(Collection)9932"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Collection)9932": {
        "encoding": "inplace",
        "label": "contract Collection",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_contract(Collection)9932)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract Collection)",
        "numberOfBytes": "32",
        "value": "t_contract(Collection)9932"
      },
      "t_mapping(t_uint256,t_struct(MarketItem)3431_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Marketplace.MarketItem)",
        "numberOfBytes": "32",
        "value": "t_struct(MarketItem)3431_storage"
      },
      "t_struct(MarketItem)3431_storage": {
        "encoding": "inplace",
        "label": "struct Marketplace.MarketItem",
        "members": [
          {
            "astId": 3420,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3422,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3424,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 3426,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "paymentToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 3428,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "price",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3430,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "listed",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}