{
  "address": "0x8A2baC12fA52Cff055FAc75509bf7aB789089e10",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "opsAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rentShare",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rentDistributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        }
      ],
      "name": "RentShareDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CLAIMER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSITOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISTRIBUTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SHARE_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributorAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "distributorForToken",
      "outputs": [
        {
          "internalType": "contract RentDistributor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "forToken",
      "outputs": [
        {
          "internalType": "contract RevenueShare",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getManagedContracts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "revenueShare",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rentDistributor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "distributorTaskId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct TangibleRentShare.RevenueShareContract[]",
          "name": "contracts",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ops",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revenueToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "startDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "stopDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaa3786b5790b11980dc4d06f4e1829c1ee7c1e01484439b4f804083968088f39",
  "receipt": {
    "to": null,
    "from": "0x3d41487A3c5662eDE90D0eE8854f3cC59E8D66AD",
    "contractAddress": "0x8A2baC12fA52Cff055FAc75509bf7aB789089e10",
    "transactionIndex": 19,
    "gasUsed": "5240459",
    "logsBloom": "0x
    "blockHash": "0x83164017ee06c4e2cdc03d79de9be40c8f77a6591594cabd7a480abb36676bff",
    "transactionHash": "0xaa3786b5790b11980dc4d06f4e1829c1ee7c1e01484439b4f804083968088f39",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 26644244,
        "transactionHash": "0xaa3786b5790b11980dc4d06f4e1829c1ee7c1e01484439b4f804083968088f39",
        "address": "0x8A2baC12fA52Cff055FAc75509bf7aB789089e10",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003d41487a3c5662ede90d0ee8854f3cc59e8d66ad",
          "0x0000000000000000000000003d41487a3c5662ede90d0ee8854f3cc59e8d66ad"
        ],
        "data": "0x",
        "logIndex": 41,
        "blockHash": "0x83164017ee06c4e2cdc03d79de9be40c8f77a6591594cabd7a480abb36676bff"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 26644244,
        "transactionHash": "0xaa3786b5790b11980dc4d06f4e1829c1ee7c1e01484439b4f804083968088f39",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000003d41487a3c5662ede90d0ee8854f3cc59e8d66ad",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000016e8feb8078a7900000000000000000000000000000000000000000000000041b5d92457220cf7000000000000000000000000000000000000000000000e64b6f3e3d9500688d1000000000000000000000000000000000000000000000000419ef0259f1a827e000000000000000000000000000000000000000000000e64b70accd8080e134a",
        "logIndex": 42,
        "blockHash": "0x83164017ee06c4e2cdc03d79de9be40c8f77a6591594cabd7a480abb36676bff"
      }
    ],
    "blockNumber": 26644244,
    "cumulativeGasUsed": "6344055",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA0fB0349526B7213b6be0F1D9A62f952A9179D96",
    "0xB3f5503f93d5Ef84b06993a1975B9D21B962892F"
  ],
  "numDeployments": 25,
  "solcInputHash": "f3545d3032b55b8f75f04a620af3499c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"opsAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rentShare\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rentDistributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"}],\"name\":\"RentShareDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIMER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISTRIBUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHARE_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"distributorForToken\",\"outputs\":[{\"internalType\":\"contract RentDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"forToken\",\"outputs\":[{\"internalType\":\"contract RevenueShare\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManagedContracts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"revenueShare\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rentDistributor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"distributorTaskId\",\"type\":\"bytes32\"}],\"internalType\":\"struct TangibleRentShare.RevenueShareContract[]\",\"name\":\"contracts\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ops\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"startDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stopDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TangibleRentShare.sol\":\"TangibleRentShare\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/RentDistributer.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IOps.sol\\\";\\nimport \\\"./interfaces/RevenueShare.sol\\\";\\n\\ncontract RentDistributor is AccessControl {\\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\\\"DEPOSITOR\\\");\\n    bytes32 public constant DISTRIBUTOR_ROLE = keccak256(\\\"DISTRIBUTOR\\\");\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER\\\");\\n\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable revenueToken;\\n\\n    RevenueShare public rentShareContract;\\n\\n    uint256 public dailyAmount;\\n    uint256 public nextDistribution;\\n    bool public paused;\\n\\n    constructor(address tokenContractAddress) {\\n        revenueToken = IERC20(tokenContractAddress);\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(DEFAULT_ADMIN_ROLE, tx.origin);\\n        _grantRole(MANAGER_ROLE, tx.origin);\\n        paused = true;\\n    }\\n\\n    function pause() external onlyRole(MANAGER_ROLE) {\\n        paused = true;\\n    }\\n\\n    function unpause() external onlyRole(MANAGER_ROLE) {\\n        nextDistribution = block.timestamp;\\n        paused = false;\\n    }\\n\\n    function setRevenueShareContract(address contractAddress)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        rentShareContract = RevenueShare(contractAddress);\\n    }\\n\\n    function deposit(uint256 amount) external onlyRole(DEPOSITOR_ROLE) {\\n        revenueToken.safeTransferFrom(msg.sender, address(this), amount);\\n        uint256 balance = revenueToken.balanceOf(address(this));\\n        dailyAmount = balance / 31;\\n    }\\n\\n    function checker()\\n        external\\n        view\\n        returns (bool canExec, bytes memory execPayload)\\n    {\\n        canExec = !paused && block.timestamp >= nextDistribution;\\n        execPayload = abi.encodeWithSelector(this.distribute.selector);\\n    }\\n\\n    function distribute() external onlyRole(DISTRIBUTOR_ROLE) {\\n        require(\\n            address(rentShareContract) != address(0),\\n            \\\"contract address not set\\\"\\n        );\\n        require(dailyAmount > 0, \\\"no scheduled payments\\\");\\n        require(\\n            revenueToken.balanceOf(address(this)) >= dailyAmount,\\n            \\\"no funds left\\\"\\n        );\\n        require(block.timestamp >= nextDistribution, \\\"too soon\\\");\\n        revenueToken.approve(address(rentShareContract), dailyAmount);\\n        rentShareContract.deposit(dailyAmount);\\n        nextDistribution += 24 hours;\\n    }\\n\\n    function withdraw(uint256 amount) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        revenueToken.safeTransfer(msg.sender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x4274df0ecc181d180f5065c1fbdaaab89c34aeec7aedb5b94c3c8767bb1be15a\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/TangibleRentShare.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\n\\nimport \\\"./interfaces/RevenueShare.sol\\\";\\nimport \\\"./RentDistributer.sol\\\";\\nimport \\\"./TangibleRevenueShare.sol\\\";\\n\\ncontract TangibleRentShare is AccessControl {\\n    event RentShareDeployed(\\n        address indexed contractAddress,\\n        uint256 indexed tokenId,\\n        address rentShare,\\n        address rentDistributor,\\n        bytes32 taskId\\n    );\\n\\n    struct RevenueShareContract {\\n        address revenueShare;\\n        address rentDistributor;\\n        address contractAddress;\\n        uint256 tokenId;\\n        bytes32 distributorTaskId;\\n    }\\n\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant CLAIMER_ROLE = keccak256(\\\"CLAIMER\\\");\\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\\\"DEPOSITOR\\\");\\n    bytes32 public constant SHARE_MANAGER_ROLE = keccak256(\\\"SHARE_MANAGER\\\");\\n    bytes32 public constant DISTRIBUTOR_ROLE = keccak256(\\\"DISTRIBUTOR\\\");\\n\\n    address public immutable revenueToken;\\n    address public immutable ops;\\n\\n    address public distributorAddress;\\n\\n    mapping(bytes => RevenueShareContract) private _contractForToken;\\n\\n    bytes[] private _tokens;\\n\\n    constructor(address tokenContractAddress, address opsAddress) {\\n        revenueToken = tokenContractAddress;\\n        ops = opsAddress;\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function distributorForToken(address contractAddress, uint256 tokenId)\\n        public\\n        view\\n        returns (RentDistributor)\\n    {\\n        bytes memory token = abi.encodePacked(contractAddress, tokenId);\\n        address distributor = _contractForToken[token].rentDistributor;\\n        require(distributor != address(0), \\\"no distributor\\\");\\n        return RentDistributor(distributor);\\n    }\\n\\n    function deposit(\\n        address contractAddress,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) public onlyRole(DEPOSITOR_ROLE) {\\n        IERC20(revenueToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n        RentDistributor distributor = distributorForToken(\\n            contractAddress,\\n            tokenId\\n        );\\n        IERC20(revenueToken).approve(address(distributor), amount);\\n        distributor.deposit(amount);\\n    }\\n\\n    function forToken(address contractAddress, uint256 tokenId)\\n        external\\n        returns (RevenueShare)\\n    {\\n        bytes memory token = abi.encodePacked(contractAddress, tokenId);\\n        if (_contractForToken[token].revenueShare == address(0)) {\\n            _checkRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n            _tokens.push(token);\\n            TangibleRevenueShare revenueShare = new TangibleRevenueShare(\\n                revenueToken\\n            );\\n            RentDistributor distributor = new RentDistributor(revenueToken);\\n            revenueShare.grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n            revenueShare.grantRole(DEPOSITOR_ROLE, address(distributor));\\n            distributor.setRevenueShareContract(address(revenueShare));\\n            distributor.grantRole(DEPOSITOR_ROLE, address(this));\\n            distributor.grantRole(DISTRIBUTOR_ROLE, ops);\\n            _contractForToken[token] = RevenueShareContract(\\n                address(revenueShare),\\n                address(distributor),\\n                contractAddress,\\n                tokenId,\\n                bytes32(0)\\n            );\\n            startDistributor(contractAddress, tokenId);\\n            emit RentShareDeployed(\\n                contractAddress,\\n                tokenId,\\n                address(revenueShare),\\n                address(distributor),\\n                _contractForToken[token].distributorTaskId\\n            );\\n        }\\n        return RevenueShare(_contractForToken[token].revenueShare);\\n    }\\n\\n    function startDistributor(address contractAddress, uint256 tokenId)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        bytes memory token = abi.encodePacked(contractAddress, tokenId);\\n        RevenueShareContract storage contract_ = _contractForToken[token];\\n        if (contract_.distributorTaskId != bytes32(0)) {\\n            stopDistributor(contractAddress, tokenId);\\n        }\\n        RentDistributor distributor = RentDistributor(\\n            contract_.rentDistributor\\n        );\\n        contract_.distributorTaskId = IOps(ops).createTask(\\n            address(distributor),\\n            distributor.distribute.selector,\\n            address(distributor),\\n            abi.encodeWithSelector(distributor.checker.selector)\\n        );\\n    }\\n\\n    function stopDistributor(address contractAddress, uint256 tokenId)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        bytes memory token = abi.encodePacked(contractAddress, tokenId);\\n        RevenueShareContract storage contract_ = _contractForToken[token];\\n        require(\\n            contract_.distributorTaskId != bytes32(0),\\n            \\\"task is not running\\\"\\n        );\\n        IOps(ops).cancelTask(contract_.distributorTaskId);\\n        contract_.distributorTaskId = bytes32(0);\\n    }\\n\\n    function getManagedContracts()\\n        external\\n        view\\n        returns (RevenueShareContract[] memory contracts)\\n    {\\n        uint256 length = _tokens.length;\\n        contracts = new RevenueShareContract[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            contracts[i] = _contractForToken[_tokens[i]];\\n        }\\n    }\\n\\n    function withdraw(\\n        address contractAddress,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        RentDistributor distributor = distributorForToken(\\n            contractAddress,\\n            tokenId\\n        );\\n        if (amount == 0) {\\n            amount = IERC20(revenueToken).balanceOf(address(distributor));\\n        }\\n        distributor.withdraw(amount);\\n        IERC20(revenueToken).transfer(msg.sender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x6a39d2a29c61a81a250e4a735ea87e5d06f0e4c1d5adde92e94b1e5feb2b13c0\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/TangibleRevenueShare.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\n\\nimport \\\"./interfaces/RevenueShare.sol\\\";\\n\\ncontract TangibleRevenueShare is RevenueShare, AccessControl {\\n    event UpdatedShare(\\n        address indexed contractAddress,\\n        uint256 indexed tokenId,\\n        int256 delta,\\n        uint256 share\\n    );\\n\\n    bytes32 public constant CLAIMER_ROLE = keccak256(\\\"CLAIMER\\\");\\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\\\"DEPOSITOR\\\");\\n    bytes32 public constant SHARE_MANAGER_ROLE = keccak256(\\\"SHARE_MANAGER\\\");\\n\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable revenueToken;\\n\\n    uint256[] public cycles;\\n\\n    uint256 public total;\\n\\n    mapping(uint256 => int256) public totals;\\n    mapping(uint256 => uint256) public revenue;\\n\\n    mapping(bytes => int256) public share;\\n    mapping(bytes => mapping(uint256 => int256)) public changes;\\n    mapping(bytes => uint256) public lastClaim;\\n\\n    mapping(address => uint256) public _contractIndex;\\n\\n    address[] public _contracts;\\n\\n    constructor(address tokenContractAddress) {\\n        revenueToken = IERC20(tokenContractAddress);\\n        cycles.push(block.timestamp);\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function currentCycle() public view returns (uint256) {\\n        uint256 numCycles = cycles.length;\\n        return cycles[numCycles - 1];\\n    }\\n\\n    function _claimableForToken(bytes memory token)\\n        internal\\n        view\\n        returns (uint256 amount)\\n    {\\n        int256 currentShare = share[token];\\n        uint256 numCycles = cycles.length;\\n        uint256 lastCycle = lastClaim[token];\\n        mapping(uint256 => int256) storage change = changes[token];\\n        uint256 i = 1;\\n        uint256 cycle = cycles[numCycles - i];\\n        int256 currentTotal = int256(total) - totals[cycle];\\n        currentShare -= change[cycle];\\n        while (i < numCycles && cycle > lastCycle) {\\n            uint256 currentRevenue = revenue[cycle];\\n            i++;\\n            cycle = cycles[numCycles - i];\\n            amount +=\\n                (currentRevenue * uint256(currentShare)) /\\n                uint256(currentTotal);\\n            currentShare -= change[cycle];\\n            currentTotal -= totals[cycle];\\n        }\\n    }\\n\\n    function claimableForToken(address contractAddress, uint256 tokenId)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        bytes memory token = abi.encodePacked(contractAddress, tokenId);\\n        return _claimableForToken(token);\\n    }\\n\\n    function claimableForTokens(\\n        address[] memory contractAddresses,\\n        uint256[] memory tokenIds\\n    ) external view override returns (uint256[] memory) {\\n        uint256 len = contractAddresses.length;\\n        uint256[] memory result = new uint256[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            result[i] = _claimableForToken(\\n                abi.encodePacked(contractAddresses[i], tokenIds[i])\\n            );\\n        }\\n        return result;\\n    }\\n\\n    function claimableFor(address account)\\n        external\\n        view\\n        returns (uint256 amount)\\n    {\\n        uint256 numContracts = _contracts.length;\\n        for (uint256 i = 0; i < numContracts; i++) {\\n            address contractAddress = _contracts[i];\\n            ERC721Enumerable nft = ERC721Enumerable(contractAddress);\\n            uint256 numTokens = nft.balanceOf(account);\\n            for (uint256 j = 0; j < numTokens; j++) {\\n                uint256 tokenId = nft.tokenOfOwnerByIndex(account, j);\\n                bytes memory token = abi.encodePacked(contractAddress, tokenId);\\n                amount += _claimableForToken(token);\\n            }\\n        }\\n    }\\n\\n    function claimFor(address account) external {\\n        require(\\n            account == msg.sender || hasRole(CLAIMER_ROLE, msg.sender),\\n            \\\"unauthorized claimer\\\"\\n        );\\n        uint256 amount;\\n        uint256 cycle = currentCycle();\\n        uint256 numContracts = _contracts.length;\\n        for (uint256 j = 0; j < numContracts; j++) {\\n            address contractAddress = _contracts[j];\\n            ERC721Enumerable nft = ERC721Enumerable(contractAddress);\\n            uint256 numTokens = nft.balanceOf(account);\\n            for (uint256 k = 0; k < numTokens; k++) {\\n                uint256 tokenId = nft.tokenOfOwnerByIndex(account, k);\\n                bytes memory token = abi.encodePacked(contractAddress, tokenId);\\n                amount += _claimableForToken(token);\\n                lastClaim[token] = cycle;\\n            }\\n        }\\n        require(amount > 0, \\\"no claimable amount\\\");\\n        revenueToken.safeTransfer(account, amount);\\n    }\\n\\n    function claimForToken(address contractAddress, uint256 tokenId) external {\\n        address owner = IERC721(contractAddress).ownerOf(tokenId);\\n        require(\\n            owner == msg.sender || hasRole(CLAIMER_ROLE, msg.sender),\\n            \\\"unauthorized claimer\\\"\\n        );\\n        uint256 cycle = currentCycle();\\n        bytes memory token = abi.encodePacked(contractAddress, tokenId);\\n        uint256 amount = _claimableForToken(token);\\n        if (amount > 0) {\\n            revenueToken.safeTransfer(owner, amount);\\n            lastClaim[token] = cycle;\\n        }\\n    }\\n\\n    function shareFor(address account)\\n        external\\n        view\\n        returns (uint256 totalShare)\\n    {\\n        uint256 numContracts = _contracts.length;\\n        for (uint256 i = 0; i < numContracts; i++) {\\n            address contractAddress = _contracts[i];\\n            ERC721Enumerable nft = ERC721Enumerable(contractAddress);\\n            uint256 numTokens = nft.balanceOf(account);\\n            for (uint256 j = 0; j < numTokens; j++) {\\n                uint256 tokenId = nft.tokenOfOwnerByIndex(account, j);\\n                bytes memory token = abi.encodePacked(contractAddress, tokenId);\\n                totalShare += uint256(share[token]);\\n            }\\n        }\\n    }\\n\\n    function deposit(uint256 amount)\\n        external\\n        override\\n        onlyRole(DEPOSITOR_ROLE)\\n    {\\n        revenueToken.safeTransferFrom(msg.sender, address(this), amount);\\n        cycles.push(block.timestamp);\\n        revenue[currentCycle()] = amount;\\n    }\\n\\n    function updateShare(\\n        address contractAddress,\\n        uint256 tokenId,\\n        int256 amount\\n    ) external override onlyRole(SHARE_MANAGER_ROLE) {\\n        bytes memory token = abi.encodePacked(contractAddress, tokenId);\\n        uint256 cycle = currentCycle();\\n        if (share[token] == 0) {\\n            lastClaim[token] = cycle;\\n        }\\n        if (-amount > share[token]) {\\n            amount = -share[token];\\n        }\\n        share[token] += amount;\\n        changes[token][cycle] += amount;\\n        total = uint256(int256(total) + amount);\\n        totals[cycle] += amount;\\n        if (_contractIndex[contractAddress] == 0) {\\n            _contracts.push(contractAddress);\\n            _contractIndex[contractAddress] = _contracts.length;\\n        }\\n        emit UpdatedShare(\\n            contractAddress,\\n            tokenId,\\n            amount,\\n            uint256(share[token])\\n        );\\n    }\\n\\n    function unregisterContract(address contractAddress)\\n        external\\n        override\\n        onlyRole(SHARE_MANAGER_ROLE)\\n    {\\n        uint256 index = _contractIndex[contractAddress];\\n        if (index != 0) {\\n            uint256 numContracts = _contracts.length;\\n            if (index != numContracts) {\\n                _contracts[index - 1] = _contracts[numContracts - 1];\\n            }\\n            _contracts.pop();\\n        }\\n        delete _contractIndex[contractAddress];\\n    }\\n}\\n\",\"keccak256\":\"0xb823d79431a9703089d9d10ef3aadaa01e633500ef3c80d8b676174f2edacf4e\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IOps.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\ninterface IOps {\\n    function cancelTask(bytes32 _taskId) external;\\n\\n    function createTask(\\n        address _execAddress,\\n        bytes4 _execSelector,\\n        address _resolverAddress,\\n        bytes calldata _resolverData\\n    ) external returns (bytes32 task);\\n}\\n\",\"keccak256\":\"0x4056eea8f58a3a5c1543f9c155709f5a328b22074c50c5e8bb3c6a85270b1b3a\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/RevenueShare.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\ninterface RevenueShare {\\n    function claimableForToken(address contractAddress, uint256 tokenId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function claimableForTokens(\\n        address[] memory contractAddresses,\\n        uint256[] memory tokenIds\\n    ) external view returns (uint256[] memory);\\n\\n    function deposit(uint256 amount) external;\\n\\n    function updateShare(\\n        address contractAddress,\\n        uint256 tokenId,\\n        int256 amount\\n    ) external;\\n\\n    function unregisterContract(address contractAddress) external;\\n}\\n\",\"keccak256\":\"0xbe7af3493c32f9b3bfaa4db98b7645c3f3122987b507ea24720daeac46411013\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162005f8138038062005f81833981016040819052620000349162000121565b6001600160601b0319606083811b821660805282901b1660a0526200005b60003362000063565b505062000158565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000100576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620000bf3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b80516001600160a01b03811681146200011c57600080fd5b919050565b6000806040838503121562000134578182fd5b6200013f8362000104565b91506200014f6020840162000104565b90509250929050565b60805160601c60a05160601c615dbe620001c3600039600081816103d301528181610a08015281816110080152611193015260008181610278015281816104ea015281816105630152818161073201528181610793015281816112b001526113d90152615dbe6000f3fe60806040523480156200001157600080fd5b5060043610620001955760003560e01c80639f53d94111620000e9578063b1de12911162000097578063e70abe92116200006e578063e70abe9214620003cd578063f0bd87cc14620003f5578063fc5f18d3146200041d57600080fd5b8063b1de12911462000388578063b5c5f672146200039f578063d547741f14620003b657600080fd5b8063a3b0b5a311620000cc578063a3b0b5a31462000324578063a51af4c5146200034c578063b079662c146200036057600080fd5b80639f53d9411462000304578063a217fddf146200031b57600080fd5b806336568abe116200014757806385479916116200012a57806385479916146200029a57806391d1485414620002b35780639dc3c50614620002ed57600080fd5b806336568abe146200025b578063556e4e68146200027257600080fd5b8063248a9ca3116200017c578063248a9ca314620001df57806329cc93de14620002145780632f2ff15d146200024457600080fd5b806301ffc9a7146200019a5780630efe6a8b14620001c6575b600080fd5b620001b1620001ab36600462001cd5565b62000445565b60405190151581526020015b60405180910390f35b620001dd620001d736600462001c1e565b620004af565b005b62000205620001f036600462001c75565b60009081526020819052604090206001015490565b604051908152602001620001bd565b6200022b6200022536600462001bf2565b62000662565b6040516001600160a01b039091168152602001620001bd565b620001dd6200025536600462001ca7565b62000c18565b620001dd6200026c36600462001ca7565b62000c47565b6200022b7f000000000000000000000000000000000000000000000000000000000000000081565b620002a462000cdb565b604051620001bd919062001ebb565b620001b1620002c436600462001ca7565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6200022b620002fe36600462001bf2565b62000e50565b620001dd6200031536600462001bf2565b62000f15565b62000205600081565b620002057fe16b3d8fc79140c62874442c8b523e98592b429e73c0db67686a5b378b29f33681565b6001546200022b906001600160a01b031681565b620002057fae7c689704f34080183a85b40737aa33c547df6b33d9c2e9da214e4f135d1f7681565b620001dd6200039936600462001bf2565b6200107f565b620001dd620003b036600462001c1e565b62001254565b620001dd620003c736600462001ca7565b6200146b565b6200022b7f000000000000000000000000000000000000000000000000000000000000000081565b620002057f85faced7bde13e1a7dad704b895f006e704f207617d68166b31ba2d79624862d81565b620002057fe5667d34d7ea8d6fdb3aa71a0a5b85e4cf7f68356dd003cd638556b0eea2bce581565b60006001600160e01b031982167f7965db0b000000000000000000000000000000000000000000000000000000001480620004a957507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b7fe16b3d8fc79140c62874442c8b523e98592b429e73c0db67686a5b378b29f336620004dc813362001495565b620005136001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330856200151c565b600062000521858562000e50565b6040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b038083166004830152602482018690529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b390604401602060405180830381600087803b158015620005aa57600080fd5b505af1158015620005bf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005e5919062001c53565b506040517fb6b55f25000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b0382169063b6b55f2590602401600060405180830381600087803b1580156200064257600080fd5b505af115801562000657573d6000803e3d6000fd5b505050505050505050565b6040516bffffffffffffffffffffffff19606084901b166020820152603481018290526000908190605401604051602081830303815290604052905060006001600160a01b0316600282604051620006bb919062001d2d565b908152604051908190036020019020546001600160a01b0316141562000be457620006e860003362001495565b6003805460018101825560009190915281516200072d917fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190602084019062001b13565b5060007f00000000000000000000000000000000000000000000000000000000000000006040516200075f9062001ba2565b6001600160a01b039091168152602001604051809103906000f0801580156200078c573d6000803e3d6000fd5b50905060007f0000000000000000000000000000000000000000000000000000000000000000604051620007c09062001bb0565b6001600160a01b039091168152602001604051809103906000f080158015620007ed573d6000803e3d6000fd5b50604051632f2ff15d60e01b8152600060048201523360248201529091506001600160a01b03831690632f2ff15d90604401600060405180830381600087803b1580156200083a57600080fd5b505af11580156200084f573d6000803e3d6000fd5b5050604051632f2ff15d60e01b81527fe16b3d8fc79140c62874442c8b523e98592b429e73c0db67686a5b378b29f33660048201526001600160a01b03848116602483015285169250632f2ff15d9150604401600060405180830381600087803b158015620008bd57600080fd5b505af1158015620008d2573d6000803e3d6000fd5b50506040517fb4a84c230000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528416925063b4a84c239150602401600060405180830381600087803b1580156200093357600080fd5b505af115801562000948573d6000803e3d6000fd5b5050604051632f2ff15d60e01b81527fe16b3d8fc79140c62874442c8b523e98592b429e73c0db67686a5b378b29f33660048201523060248201526001600160a01b0384169250632f2ff15d9150604401600060405180830381600087803b158015620009b457600080fd5b505af1158015620009c9573d6000803e3d6000fd5b5050604051632f2ff15d60e01b81527f85faced7bde13e1a7dad704b895f006e704f207617d68166b31ba2d79624862d60048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116602483015284169250632f2ff15d9150604401600060405180830381600087803b15801562000a5757600080fd5b505af115801562000a6c573d6000803e3d6000fd5b505050506040518060a00160405280836001600160a01b03168152602001826001600160a01b03168152602001876001600160a01b031681526020018681526020016000801b81525060028460405162000ac7919062001d2d565b9081526040805160209281900383019020835181547fffffffffffffffffffffffff00000000000000000000000000000000000000009081166001600160a01b03928316178355938501516001830180548616918316919091179055918401516002820180549094169216919091179091556060820151600382015560809091015160049091015562000b5b86866200107f565b84866001600160a01b03167fde00b39a88186743e396cc46b9c2b1b32b887711c06bd75307e4f69385f0384d848460028860405162000b9b919062001d2d565b9081526040519081900360200181206004015462000bd99392916001600160a01b039384168152919092166020820152604081019190915260600190565b60405180910390a350505b60028160405162000bf6919062001d2d565b908152604051908190036020019020546001600160a01b031691505092915050565b60008281526020819052604090206001015462000c36813362001495565b62000c428383620015ac565b505050565b6001600160a01b038116331462000ccb5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b62000cd782826200164c565b5050565b6003546060908067ffffffffffffffff81111562000d0957634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801562000d6457816020015b6040805160a08101825260008082526020808301829052928201819052606082018190526080820152825260001990920191018162000d285790505b50915060005b8181101562000e4b5760026003828154811062000d9757634e487b7160e01b600052603260045260246000fd5b9060005260206000200160405162000db0919062001d4b565b90815260408051918290036020908101832060a08401835280546001600160a01b039081168552600182015481169285019290925260028101549091169183019190915260038101546060830152600401546080820152835184908390811062000e2a57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808062000e429062002011565b91505062000d6a565b505090565b6040516bffffffffffffffffffffffff19606084901b1660208201526034810182905260009081906054016040516020818303038152906040529050600060028260405162000ea0919062001d2d565b908152604051908190036020019020600101546001600160a01b031690508062000f0d5760405162461bcd60e51b815260206004820152600e60248201527f6e6f206469737472696275746f72000000000000000000000000000000000000604482015260640162000cc2565b949350505050565b600062000f23813362001495565b6040516bffffffffffffffffffffffff19606085901b166020820152603481018390526000906054016040516020818303038152906040529050600060028260405162000f71919062001d2d565b908152604051908190036020019020600481015490915062000fd65760405162461bcd60e51b815260206004820152601360248201527f7461736b206973206e6f742072756e6e696e6700000000000000000000000000604482015260640162000cc2565b6004818101546040517fee8ca3b5000000000000000000000000000000000000000000000000000000008152918201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ee8ca3b590602401600060405180830381600087803b1580156200105557600080fd5b505af11580156200106a573d6000803e3d6000fd5b50506000600490930192909255505050505050565b60006200108d813362001495565b6040516bffffffffffffffffffffffff19606085901b1660208201526034810183905260009060540160405160208183030381529060405290506000600282604051620010db919062001d2d565b908152604051908190036020019020600481015490915015620011045762001104858562000f15565b60018101546040805160048082526024820183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fcf5303cf0000000000000000000000000000000000000000000000000000000017905291517f8b92696a0000000000000000000000000000000000000000000000000000000081526001600160a01b03938416937f00000000000000000000000000000000000000000000000000000000000000001692638b92696a92620011ee9286927fe4fc6b6d0000000000000000000000000000000000000000000000000000000092849290910162001e73565b602060405180830381600087803b1580156200120957600080fd5b505af11580156200121e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001244919062001c8e565b8260040181905550505050505050565b600062001262813362001495565b600062001270858562000e50565b90508262001331576040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0382811660048301527f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015620012f357600080fd5b505afa15801562001308573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200132e919062001c8e565b92505b6040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b03821690632e1a7d4d90602401600060405180830381600087803b1580156200138d57600080fd5b505af1158015620013a2573d6000803e3d6000fd5b50506040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063a9059cbb9150604401602060405180830381600087803b1580156200142857600080fd5b505af11580156200143d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001463919062001c53565b505050505050565b60008281526020819052604090206001015462001489813362001495565b62000c4283836200164c565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000cd757620014d4816001600160a01b03166014620016cc565b620014e1836020620016cc565b604051602001620014f492919062001dee565b60408051601f198184030181529082905262461bcd60e51b825262000cc29160040162001f39565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052620015a69085906200190e565b50505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000cd7576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620016083390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff161562000cd7576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60606000620016dd83600262001f69565b620016ea90600262001f4e565b67ffffffffffffffff8111156200171157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156200173c576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106200178257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110620017dc57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006200180284600262001f69565b6200180f90600162001f4e565b90505b6001811115620018b6577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106200186057634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106200188557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93620018ae8162001fba565b905062001812565b508315620019075760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000cc2565b9392505050565b600062001965826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620019fa9092919063ffffffff16565b80519091501562000c42578080602001905181019062001986919062001c53565b62000c425760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840162000cc2565b606062000f0d848460008585843b62001a565760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640162000cc2565b600080866001600160a01b0316858760405162001a74919062001d2d565b60006040518083038185875af1925050503d806000811462001ab3576040519150601f19603f3d011682016040523d82523d6000602084013e62001ab8565b606091505b509150915062001aca82828662001ad5565b979650505050505050565b6060831562001ae657508162001907565b82511562001af75782518084602001fd5b8160405162461bcd60e51b815260040162000cc2919062001f39565b82805462001b219062001fd4565b90600052602060002090601f01602090048101928262001b45576000855562001b90565b82601f1062001b6057805160ff191683800117855562001b90565b8280016001018555821562001b90579182015b8281111562001b9057825182559160200191906001019062001b73565b5062001b9e92915062001bbe565b5090565b6126ca806200204683390190565b611679806200471083390190565b5b8082111562001b9e576000815560010162001bbf565b80356001600160a01b038116811462001bed57600080fd5b919050565b6000806040838503121562001c05578182fd5b62001c108362001bd5565b946020939093013593505050565b60008060006060848603121562001c33578081fd5b62001c3e8462001bd5565b95602085013595506040909401359392505050565b60006020828403121562001c65578081fd5b8151801515811462001907578182fd5b60006020828403121562001c87578081fd5b5035919050565b60006020828403121562001ca0578081fd5b5051919050565b6000806040838503121562001cba578182fd5b8235915062001ccc6020840162001bd5565b90509250929050565b60006020828403121562001ce7578081fd5b81356001600160e01b03198116811462001907578182fd5b6000815180845262001d1981602086016020860162001f8b565b601f01601f19169290920160200192915050565b6000825162001d4181846020870162001f8b565b9190910192915050565b600080835482600182811c91508083168062001d6857607f831692505b602080841082141562001d8957634e487b7160e01b87526022600452602487fd5b81801562001da0576001811462001db25762001de0565b60ff1986168952848901965062001de0565b60008a815260209020885b8681101562001dd85781548b82015290850190830162001dbd565b505084890196505b509498975050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835162001e2881601785016020880162001f8b565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835162001e6781602884016020880162001f8b565b01602801949350505050565b60006001600160a01b0380871683526001600160e01b0319861660208401528085166040840152506080606083015262001eb1608083018462001cff565b9695505050505050565b602080825282518282018190526000919060409081850190868401855b8281101562001f2c57815180516001600160a01b03908116865287820151811688870152868201511686860152606080820151908601526080908101519085015260a0909301929085019060010162001ed8565b5091979650505050505050565b60208152600062001907602083018462001cff565b6000821982111562001f645762001f646200202f565b500190565b600081600019048311821515161562001f865762001f866200202f565b500290565b60005b8381101562001fa857818101518382015260200162001f8e565b83811115620015a65750506000910152565b60008162001fcc5762001fcc6200202f565b506000190190565b600181811c9082168062001fe957607f821691505b602082108114156200200b57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156200202857620020286200202f565b5060010190565b634e487b7160e01b600052601160045260246000fdfe60a06040523480156200001157600080fd5b50604051620026ca380380620026ca83398101604081905262000034916200012e565b6001600160601b0319606082901b166080526001805480820182556000918252427fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6909101556200008690336200008d565b506200015e565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200012a576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620000e93390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006020828403121562000140578081fd5b81516001600160a01b038116811462000157578182fd5b9392505050565b60805160601c612538620001926000396000818161031201528181610a3101528181610b050152610ed201526125386000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806391d1485411610104578063bab2f552116100a2578063eeb57b8811610071578063eeb57b88146104d9578063f8cc2cdc146104f9578063fac2c6211461050c578063fc5f18d31461051f57600080fd5b8063bab2f55214610498578063d547741f146104a0578063ddeae033146104b3578063ee8ad528146104c657600080fd5b8063a3b0b5a3116100de578063a3b0b5a314610424578063afbce3b91461044b578063b079662c1461045e578063b6b55f251461048557600080fd5b806391d14854146103c55780639eac5c93146103fc578063a217fddf1461041c57600080fd5b806338c361e71161017c578063556e4e681161014b578063556e4e681461030d57806367acd8a01461034c5780636a0cc2051461035f5780637722dcfd1461038a57600080fd5b806338c361e71461029c57806348cc8d0c146102bc57806351615faf146102cf578063552bb9c3146102fa57600080fd5b8063248a9ca3116101b8578063248a9ca3146102485780632ddbd13a1461026b5780632f2ff15d1461027457806336568abe1461028957600080fd5b806301ffc9a7146101df57806307c9b254146102075780631b33871014610228575b600080fd5b6101f26101ed366004612109565b610546565b60405190151581526020015b60405180910390f35b61021a610215366004611f80565b6105af565b6040519081526020016101fe565b61021a6102363660046120c2565b60036020526000908152604090205481565b61021a6102563660046120c2565b60009081526020819052604090206001015490565b61021a60025481565b6102876102823660046120da565b6105fc565b005b6102876102973660046120da565b610627565b61021a6102aa366004611f48565b60086020526000908152604090205481565b61021a6102ca366004611f48565b6106b8565b61021a6102dd366004612131565b805160208183018101805160078252928201919093012091525481565b610287610308366004611f80565b6108a3565b6103347f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101fe565b61033461035a3660046120c2565b610a82565b61021a61036d366004612131565b805160208183018101805160058252928201919093012091525481565b61021a610398366004612164565b81516020818401810180516006825292820194820194909420919093529091526000908152604090205481565b6101f26103d33660046120da565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b61021a61040a3660046120c2565b60046020526000908152604090205481565b61021a600081565b61021a7fe16b3d8fc79140c62874442c8b523e98592b429e73c0db67686a5b378b29f33681565b61021a6104593660046120c2565b610aac565b61021a7fae7c689704f34080183a85b40737aa33c547df6b33d9c2e9da214e4f135d1f7681565b6102876104933660046120c2565b610acd565b61021a610b83565b6102876104ae3660046120da565b610bc3565b6102876104c1366004611f48565b610be9565b61021a6104d4366004611f48565b610eff565b6104ec6104e7366004611fdf565b6110cc565b6040516101fe919061225c565b610287610507366004611fab565b61120c565b61028761051a366004611f48565b6114c0565b61021a7fe5667d34d7ea8d6fdb3aa71a0a5b85e4cf7f68356dd003cd638556b0eea2bce581565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806105a957507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6040516bffffffffffffffffffffffff19606084901b16602082015260348101829052600090819060540160405160208183030381529060405290506105f48161161a565b949350505050565b60008281526020819052604090206001015461061881336117d3565b6106228383611851565b505050565b6001600160a01b03811633146106aa5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6106b482826118ef565b5050565b600954600090815b8181101561089c576000600982815481106106eb57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546040516370a0823160e01b81526001600160a01b038881166004830152909116925082919082906370a082319060240160206040518083038186803b15801561073e57600080fd5b505afa158015610752573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077691906121a7565b905060005b8181101561088557604051632f745c5960e01b81526001600160a01b0389811660048301526024820183905260009190851690632f745c599060440160206040518083038186803b1580156107cf57600080fd5b505afa1580156107e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080791906121a7565b6040516bffffffffffffffffffffffff19606088901b16602082015260348101829052909150600090605401604051602081830303815290604052905060058160405161085491906121bf565b9081526020016040518091039020548961086e9190612380565b98505050808061087d90612489565b91505061077b565b50505050808061089490612489565b9150506106c0565b5050919050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018290526000906001600160a01b03841690636352211e9060240160206040518083038186803b1580156108ff57600080fd5b505afa158015610913573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109379190611f64565b90506001600160a01b03811633148061097e57503360009081527ff663af79306ec33a756b61b761d57de03396e7b060895197032ddb181285b7bb602052604090205460ff165b6109ca5760405162461bcd60e51b815260206004820152601460248201527f756e617574686f72697a656420636c61696d657200000000000000000000000060448201526064016106a1565b60006109d4610b83565b6040516bffffffffffffffffffffffff19606087901b1660208201526034810185905290915060009060540160405160208183030381529060405290506000610a1c8261161a565b90508015610a7a57610a586001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016858361196e565b82600783604051610a6991906121bf565b908152604051908190036020019020555b505050505050565b60098181548110610a9257600080fd5b6000918252602090912001546001600160a01b0316905081565b60018181548110610abc57600080fd5b600091825260209091200154905081565b7fe16b3d8fc79140c62874442c8b523e98592b429e73c0db67686a5b378b29f336610af881336117d3565b610b2d6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330856119ff565b6001805480820182556000918252427fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6909101558290600490610b6e610b83565b81526020810191909152604001600020555050565b60018054600091610b94818361242f565b81548110610bb257634e487b7160e01b600052603260045260246000fd5b906000526020600020015491505090565b600082815260208190526040902060010154610bdf81336117d3565b61062283836118ef565b6001600160a01b038116331480610c2e57503360009081527ff663af79306ec33a756b61b761d57de03396e7b060895197032ddb181285b7bb602052604090205460ff165b610c7a5760405162461bcd60e51b815260206004820152601460248201527f756e617574686f72697a656420636c61696d657200000000000000000000000060448201526064016106a1565b600080610c85610b83565b60095490915060005b81811015610e7457600060098281548110610cb957634e487b7160e01b600052603260045260246000fd5b60009182526020822001546040516370a0823160e01b81526001600160a01b038981166004830152909116925082919082906370a082319060240160206040518083038186803b158015610d0c57600080fd5b505afa158015610d20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4491906121a7565b905060005b81811015610e5d57604051632f745c5960e01b81526001600160a01b038a811660048301526024820183905260009190851690632f745c599060440160206040518083038186803b158015610d9d57600080fd5b505afa158015610db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd591906121a7565b6040516bffffffffffffffffffffffff19606088901b166020820152603481018290529091506000906054016040516020818303038152906040529050610e1b8161161a565b610e25908b612380565b995088600782604051610e3891906121bf565b9081526040519081900360200190205550819050610e5581612489565b915050610d49565b505050508080610e6c90612489565b915050610c8e565b5060008311610ec55760405162461bcd60e51b815260206004820152601360248201527f6e6f20636c61696d61626c6520616d6f756e740000000000000000000000000060448201526064016106a1565b610ef96001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016858561196e565b50505050565b600954600090815b8181101561089c57600060098281548110610f3257634e487b7160e01b600052603260045260246000fd5b60009182526020822001546040516370a0823160e01b81526001600160a01b038881166004830152909116925082919082906370a082319060240160206040518083038186803b158015610f8557600080fd5b505afa158015610f99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbd91906121a7565b905060005b818110156110b557604051632f745c5960e01b81526001600160a01b0389811660048301526024820183905260009190851690632f745c599060440160206040518083038186803b15801561101657600080fd5b505afa15801561102a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104e91906121a7565b6040516bffffffffffffffffffffffff19606088901b1660208201526034810182905290915060009060540160405160208183030381529060405290506110948161161a565b61109e908a612380565b9850505080806110ad90612489565b915050610fc2565b5050505080806110c490612489565b915050610f07565b815160609060008167ffffffffffffffff8111156110fa57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611123578160200160208202803683370190505b50905060005b82811015611203576111c686828151811061115457634e487b7160e01b600052603260045260246000fd5b602002602001015186838151811061117c57634e487b7160e01b600052603260045260246000fd5b60200260200101516040516020016111b292919060609290921b6bffffffffffffffffffffffff19168252601482015260340190565b60405160208183030381529060405261161a565b8282815181106111e657634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806111fb81612489565b915050611129565b50949350505050565b7fae7c689704f34080183a85b40737aa33c547df6b33d9c2e9da214e4f135d1f7661123781336117d3565b6040516bffffffffffffffffffffffff19606086901b166020820152603481018490526000906054016040516020818303038152906040529050600061127b610b83565b905060058260405161128d91906121bf565b908152602001604051809103902054600014156112c657806007836040516112b591906121bf565b908152604051908190036020019020555b6005826040516112d691906121bf565b908152602001604051809103902054846112ef906124a4565b13156113205760058260405161130591906121bf565b90815260200160405180910390205461131d906124a4565b93505b8360058360405161133191906121bf565b9081526020016040518091039020600082825461134e9190612328565b925050819055508360068360405161136691906121bf565b9081526020016040518091039020600083815260200190815260200160002060008282546113949190612328565b90915550506002546113a7908590612328565b600255600081815260036020526040812080548692906113c8908490612328565b90915550506001600160a01b03861660009081526008602052604090205461145257600980546001810182557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af01805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0389169081179091559054600091825260086020526040909120555b84866001600160a01b03167fa9208d1cbe4d1566e413448b008baa355e84d4257d66b942a49cf7eedff4654e8660058660405161148f91906121bf565b908152604051908190036020018120546114b0928252602082015260400190565b60405180910390a3505050505050565b7fae7c689704f34080183a85b40737aa33c547df6b33d9c2e9da214e4f135d1f766114eb81336117d3565b6001600160a01b03821660009081526008602052604090205480156115fe576009548181146115ae57600961152160018361242f565b8154811061153f57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316600961156160018561242f565b8154811061157f57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60098054806115cd57634e487b7160e01b600052603160045260246000fd5b6000828152602090208101600019908101805473ffffffffffffffffffffffffffffffffffffffff19169055019055505b50506001600160a01b0316600090815260086020526040812055565b60008060058360405161162d91906121bf565b90815260405190819003602001812054600154909250906000906007906116559087906121bf565b9081526020016040518091039020549050600060068660405161167891906121bf565b90815260405190819003602001902090506001600081611698818761242f565b815481106116b657634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910154808352600390915260408220546002549193506116e0916123d7565b6000838152602086905260409020549091506116fc90886123d7565b96505b858310801561170d57508482115b156117c7576000828152600460205260409020548361172b81612489565b94506001905061173b858961242f565b8154811061175957634e487b7160e01b600052603260045260246000fd5b9060005260206000200154925081888261177391906123b8565b61177d9190612398565b611787908a612380565b6000848152602087905260409020549099506117a390896123d7565b6000848152600360205260409020549098506117bf90836123d7565b9150506116ff565b50505050505050919050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166106b45761180f816001600160a01b03166014611a50565b61181a836020611a50565b60405160200161182b9291906121db565b60408051601f198184030181529082905262461bcd60e51b82526106a1916004016122a0565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166106b4576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556118ab3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16156106b4576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6040516001600160a01b0383166024820152604481018290526106229084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152611c7e565b6040516001600160a01b0380851660248301528316604482015260648101829052610ef99085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016119b3565b60606000611a5f8360026123b8565b611a6a906002612380565b67ffffffffffffffff811115611a9057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611aba576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611aff57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611b5857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611b7c8460026123b8565b611b87906001612380565b90505b6001811115611c28577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611bd657634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611bfa57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93611c2181612472565b9050611b8a565b508315611c775760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106a1565b9392505050565b6000611cd3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611d639092919063ffffffff16565b8051909150156106225780806020019051810190611cf191906120a2565b6106225760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016106a1565b60606105f4848460008585843b611dbc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106a1565b600080866001600160a01b03168587604051611dd891906121bf565b60006040518083038185875af1925050503d8060008114611e15576040519150601f19603f3d011682016040523d82523d6000602084013e611e1a565b606091505b5091509150611e2a828286611e35565b979650505050505050565b60608315611e44575081611c77565b825115611e545782518084602001fd5b8160405162461bcd60e51b81526004016106a191906122a0565b600082601f830112611e7e578081fd5b81356020611e93611e8e83612304565b6122d3565b80838252828201915082860187848660051b8901011115611eb2578586fd5b855b85811015611ed057813584529284019290840190600101611eb4565b5090979650505050505050565b600082601f830112611eed578081fd5b813567ffffffffffffffff811115611f0757611f076124d4565b611f1a601f8201601f19166020016122d3565b818152846020838601011115611f2e578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215611f59578081fd5b8135611c77816124ea565b600060208284031215611f75578081fd5b8151611c77816124ea565b60008060408385031215611f92578081fd5b8235611f9d816124ea565b946020939093013593505050565b600080600060608486031215611fbf578081fd5b8335611fca816124ea565b95602085013595506040909401359392505050565b60008060408385031215611ff1578182fd5b823567ffffffffffffffff80821115612008578384fd5b818501915085601f83011261201b578384fd5b8135602061202b611e8e83612304565b8083825282820191508286018a848660051b890101111561204a578889fd5b8896505b84871015612075578035612061816124ea565b83526001969096019591830191830161204e565b509650508601359250508082111561208b578283fd5b5061209885828601611e6e565b9150509250929050565b6000602082840312156120b3578081fd5b81518015158114611c77578182fd5b6000602082840312156120d3578081fd5b5035919050565b600080604083850312156120ec578182fd5b8235915060208301356120fe816124ea565b809150509250929050565b60006020828403121561211a578081fd5b81356001600160e01b031981168114611c77578182fd5b600060208284031215612142578081fd5b813567ffffffffffffffff811115612158578182fd5b6105f484828501611edd565b60008060408385031215612176578182fd5b823567ffffffffffffffff81111561218c578283fd5b61219885828601611edd565b95602094909401359450505050565b6000602082840312156121b8578081fd5b5051919050565b600082516121d1818460208701612446565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612213816017850160208801612446565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612250816028840160208801612446565b01602801949350505050565b6020808252825182820181905260009190848201906040850190845b8181101561229457835183529284019291840191600101612278565b50909695505050505050565b60208152600082518060208401526122bf816040850160208701612446565b601f01601f19169190910160400192915050565b604051601f8201601f1916810167ffffffffffffffff811182821017156122fc576122fc6124d4565b604052919050565b600067ffffffffffffffff82111561231e5761231e6124d4565b5060051b60200190565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03841381151615612362576123626124be565b82600160ff1b03841281161561237a5761237a6124be565b50500190565b60008219821115612393576123936124be565b500190565b6000826123b357634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156123d2576123d26124be565b500290565b600080831283600160ff1b018312811516156123f5576123f56124be565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615612429576124296124be565b50500390565b600082821015612441576124416124be565b500390565b60005b83811015612461578181015183820152602001612449565b83811115610ef95750506000910152565b600081612481576124816124be565b506000190190565b600060001982141561249d5761249d6124be565b5060010190565b6000600160ff1b8214156124ba576124ba6124be565b0390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146124ff57600080fd5b5056fea2646970667358221220f5b254c25b55bfa33f822c8f88a895a9f83de5853c4f67189384dfe61b4c76a664736f6c6343000804003360a06040523480156200001157600080fd5b506040516200167938038062001679833981016040819052620000349162000141565b6001600160601b0319606082901b1660805262000053600033620000a0565b62000060600032620000a0565b6200008c7faf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c32620000a0565b506004805460ff1916600117905562000171565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200013d576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620000fc3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006020828403121562000153578081fd5b81516001600160a01b03811681146200016a578182fd5b9392505050565b60805160601c6114c6620001b3600039600081816102310152818161042901528181610602015281816106420152818161086701526109cf01526114c66000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c80638456cb59116100d8578063b6b55f251161008c578063e4fc6b6d11610066578063e4fc6b6d14610351578063ec87621c14610359578063f0bd87cc1461038057600080fd5b8063b6b55f2514610315578063cf5303cf14610328578063d547741f1461033e57600080fd5b8063a217fddf116100bd578063a217fddf146102d3578063a3b0b5a3146102db578063b4a84c231461030257600080fd5b80638456cb591461029457806391d148541461029c57600080fd5b806338b0789d1161013a57806359c1334b1161011457806359c1334b1461026b5780635c975abb1461027457806363f9554c1461028157600080fd5b806338b0789d1461021b5780633f4ba83a14610224578063556e4e681461022c57600080fd5b80632e1a7d4d1161016b5780632e1a7d4d146101e05780632f2ff15d146101f557806336568abe1461020857600080fd5b806301ffc9a714610187578063248a9ca3146101af575b600080fd5b61019a6101953660046112a9565b6103a7565b60405190151581526020015b60405180910390f35b6101d26101bd366004611266565b60009081526020819052604090206001015490565b6040519081526020016101a6565b6101f36101ee366004611266565b610410565b005b6101f361020336600461127e565b610454565b6101f361021636600461127e565b61047f565b6101d260035481565b6101f361050c565b6102537f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101a6565b6101d260025481565b60045461019a9060ff1681565b600154610253906001600160a01b031681565b6101f3610548565b61019a6102aa36600461127e565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6101d2600081565b6101d27fe16b3d8fc79140c62874442c8b523e98592b429e73c0db67686a5b378b29f33681565b6101f361031036600461122c565b610583565b6101f3610323366004611266565b6105ca565b6103306106d9565b6040516101a69291906113b2565b6101f361034c36600461127e565b610754565b6101f361077a565b6101d27faf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c81565b6101d27f85faced7bde13e1a7dad704b895f006e704f207617d68166b31ba2d79624862d81565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061040a57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b600061041c8133610aeb565b6104506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163384610b69565b5050565b6000828152602081905260409020600101546104708133610aeb565b61047a8383610bfa565b505050565b6001600160a01b03811633146105025760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6104508282610c98565b7faf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c6105378133610aeb565b50426003556004805460ff19169055565b7faf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c6105738133610aeb565b506004805460ff19166001179055565b600061058f8133610aeb565b50600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b7fe16b3d8fc79140c62874442c8b523e98592b429e73c0db67686a5b378b29f3366105f58133610aeb565b61062a6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333085610d17565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561068c57600080fd5b505afa1580156106a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c491906112d1565b90506106d1601f826113f8565b600255505050565b60045460009060609060ff161580156106f457506003544210155b6040805160048152602481019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fe4fc6b6d0000000000000000000000000000000000000000000000000000000017905290939092509050565b6000828152602081905260409020600101546107708133610aeb565b61047a8383610c98565b7f85faced7bde13e1a7dad704b895f006e704f207617d68166b31ba2d79624862d6107a58133610aeb565b6001546001600160a01b03166107fd5760405162461bcd60e51b815260206004820152601860248201527f636f6e74726163742061646472657373206e6f7420736574000000000000000060448201526064016104f9565b60006002541161084f5760405162461bcd60e51b815260206004820152601560248201527f6e6f207363686564756c6564207061796d656e7473000000000000000000000060448201526064016104f9565b6002546040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156108b157600080fd5b505afa1580156108c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e991906112d1565b10156109375760405162461bcd60e51b815260206004820152600d60248201527f6e6f2066756e6473206c6566740000000000000000000000000000000000000060448201526064016104f9565b6003544210156109895760405162461bcd60e51b815260206004820152600860248201527f746f6f20736f6f6e00000000000000000000000000000000000000000000000060448201526064016104f9565b6001546002546040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015260248101919091527f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b390604401602060405180830381600087803b158015610a1557600080fd5b505af1158015610a29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4d9190611246565b506001546002546040517fb6b55f250000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163b6b55f2591610a9c9160040190815260200190565b600060405180830381600087803b158015610ab657600080fd5b505af1158015610aca573d6000803e3d6000fd5b505050506201518060036000828254610ae391906113e0565b909155505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661045057610b27816001600160a01b03166014610d6e565b610b32836020610d6e565b604051602001610b43929190611331565b60408051601f198184030181529082905262461bcd60e51b82526104f9916004016113cd565b6040516001600160a01b03831660248201526044810182905261047a9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152610f9c565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610450576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610c543390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610450576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6040516001600160a01b0380851660248301528316604482015260648101829052610d689085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610bae565b50505050565b60606000610d7d836002611418565b610d889060026113e0565b67ffffffffffffffff811115610dae57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610dd8576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610e1d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610e7657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000610e9a846002611418565b610ea59060016113e0565b90505b6001811115610f46577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110610ef457634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110610f1857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93610f3f81611463565b9050610ea8565b508315610f955760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104f9565b9392505050565b6000610ff1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166110819092919063ffffffff16565b80519091501561047a578080602001905181019061100f9190611246565b61047a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104f9565b60606110908484600085611098565b949350505050565b6060824710156111105760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104f9565b843b61115e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104f9565b600080866001600160a01b0316858760405161117a9190611315565b60006040518083038185875af1925050503d80600081146111b7576040519150601f19603f3d011682016040523d82523d6000602084013e6111bc565b606091505b50915091506111cc8282866111d7565b979650505050505050565b606083156111e6575081610f95565b8251156111f65782518084602001fd5b8160405162461bcd60e51b81526004016104f991906113cd565b80356001600160a01b038116811461122757600080fd5b919050565b60006020828403121561123d578081fd5b610f9582611210565b600060208284031215611257578081fd5b81518015158114610f95578182fd5b600060208284031215611277578081fd5b5035919050565b60008060408385031215611290578081fd5b823591506112a060208401611210565b90509250929050565b6000602082840312156112ba578081fd5b81356001600160e01b031981168114610f95578182fd5b6000602082840312156112e2578081fd5b5051919050565b60008151808452611301816020860160208601611437565b601f01601f19169290920160200192915050565b60008251611327818460208701611437565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611369816017850160208801611437565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516113a6816028840160208801611437565b01602801949350505050565b821515815260406020820152600061109060408301846112e9565b602081526000610f9560208301846112e9565b600082198211156113f3576113f361147a565b500190565b60008261141357634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156114325761143261147a565b500290565b60005b8381101561145257818101518382015260200161143a565b83811115610d685750506000910152565b6000816114725761147261147a565b506000190190565b634e487b7160e01b600052601160045260246000fdfea264697066735822122096b3d0b983d6452aa80df6c2df0cb3586f3b8009bdfcc0c101d89c02e979ef5464736f6c63430008040033a264697066735822122091235e3b6a0c170e0aaf9f920b26c63a6e0632148227df6bc3b125345c1f1c3d64736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/TangibleRentShare.sol:TangibleRentShare",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 7196,
        "contract": "contracts/TangibleRentShare.sol:TangibleRentShare",
        "label": "distributorAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7201,
        "contract": "contracts/TangibleRentShare.sol:TangibleRentShare",
        "label": "_contractForToken",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes_memory_ptr,t_struct(RevenueShareContract)7166_storage)"
      },
      {
        "astId": 7204,
        "contract": "contracts/TangibleRentShare.sol:TangibleRentShare",
        "label": "_tokens",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_bytes_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes_memory_ptr,t_struct(RevenueShareContract)7166_storage)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => struct TangibleRentShare.RevenueShareContract)",
        "numberOfBytes": "32",
        "value": "t_struct(RevenueShareContract)7166_storage"
      },
      "t_struct(RevenueShareContract)7166_storage": {
        "encoding": "inplace",
        "label": "struct TangibleRentShare.RevenueShareContract",
        "members": [
          {
            "astId": 7157,
            "contract": "contracts/TangibleRentShare.sol:TangibleRentShare",
            "label": "revenueShare",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7159,
            "contract": "contracts/TangibleRentShare.sol:TangibleRentShare",
            "label": "rentDistributor",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 7161,
            "contract": "contracts/TangibleRentShare.sol:TangibleRentShare",
            "label": "contractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 7163,
            "contract": "contracts/TangibleRentShare.sol:TangibleRentShare",
            "label": "tokenId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7165,
            "contract": "contracts/TangibleRentShare.sol:TangibleRentShare",
            "label": "distributorTaskId",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/TangibleRentShare.sol:TangibleRentShare",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/TangibleRentShare.sol:TangibleRentShare",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}